/********************************************************************
Apps 'n Files Pref Module
allows adding favorite apps to "Open With" Dialog
started in 04/2024 by MeyerK for FreeGEOS project
********************************************************************/
@include <stdapp.goh>
@include "prefanf.goh"
@include <config.goh>

#include <gstring.h>
#include <library.h>
#include <initfile.h>
#include <Ansi/stdio.h>
#include <Ansi/stdlib.h>
#include <Ansi/string.h>
#include <file.h>
#include <chunkarr.h>

/********************************************************************
Macros
********************************************************************/
#define SET_PSELF  pself = ObjDerefGen(oself)

/********************************************************************
Classes
********************************************************************/
@classdecl      PrefDialogMMClass;
@classdecl      PrefAppListClass;


/*****************************************************************
Hooks
*****************************************************************/
optr    _pascal PrefGetOptrBox(void);
void    _pascal PrefGetModuleInfo( PrefModuleInfo *info );

/*****************************************************************
Resources
*****************************************************************/

@start MONIKERRESOURCE, data;
    @include        <Art/moniker.goh>
    @visMoniker     PrefTextMoniker = "Apps 'n Files";
    @visMoniker     PrefMM1MonikerList = list {@PrefTextMoniker, @Moniker0, @Moniker1, @Moniker2, @Moniker3 };
@end MONIKERRESOURCE;


@start  BASEINTERFACE, notDetachable;

@object PrefDialogMMClass BaseBox = {
    GI_visMoniker = "Apps 'n Files";
    GI_states = @default & ~GS_USABLE;
    GI_comp =   @TitleGroup,
                @OpenWithGroup;
    //PDMMC_tocList = @TocList;

    HINT_INTERACTION_COMPLEX_PROPERTIES;
    HINT_ORIENT_CHILDREN_VERTICALLY;
    HINT_FULL_JUSTIFY_CHILDREN_HORIZONTALLY;
    HINT_CENTER_CHILDREN_HORIZONTALLY;
    //	ATTR_GEN_HELP_FILE = "prefsndn";
    // ATTR_GEN_HELP_CONTEXT = "dbSound";
    // ATTR_GEN_INIT_FILE_CATEGORY ="sound";
}

/**************
 * TitleGroup *
 **************/

@object GenInteractionClass TitleGroup = {
    GI_comp =   @TitleGlyph,
                @TitleHelpText;

    HINT_ORIENT_CHILDREN_HORIZONTALLY;
    HINT_EXPAND_WIDTH_TO_FIT_PARENT;
}

@object TitledGlyphClass TitleGlyph = {
    GI_visMoniker = list {@PrefTextMoniker, @Moniker0, @Moniker1, @Moniker2, @Moniker3};
}

@object GenTextClass TitleHelpText = {
    GI_attrs = @default | GA_READ_ONLY;
    GTXI_text = "Choose frequently used applications that appear in the 'Open With' dialogue.";

    HINT_EXPAND_WIDTH_TO_FIT_PARENT;
}

@object PrefInteractionClass OpenWithGroup = {
    GI_visMoniker = "Open With";
    // prefInteractionAttrs = default 	+saveOptionsOnApply;
    GI_comp =	@AddAppSelector,
                @AddAppTrigger,
                @OpenWithAppListGroup;

    HINT_DRAW_IN_BOX;
    HINT_PLACE_MONIKER_ABOVE;
    HINT_ORIENT_CHILDREN_HORIZONTALLY;
    HINT_CENTER_CHILDREN_VERTICALLY;
}

@object GenFileSelectorClass AddAppSelector = {
   //GFSI_destination = process;
   //GFSI_notificationMsg = MSG_FILEBROW_SELECTOR_ACTION;
   GFSI_attrs =           ((FSA_ALLOW_CHANGE_DIRS) & (~FSA_SHOW_FILES_DISABLED) & (~FSA_HAS_OPEN_DIR_BUTTON) & (~FSA_HAS_CHANGE_DIRECTORY_LIST))
                        | ((FSA_HAS_FILE_LIST) & (~FSA_SHOW_FIXED_DISKS_ONLY) & (~FSA_HAS_CLOSE_DIR_BUTTON) & (~FSA_HAS_DOCUMENT_BUTTON)& (~FSA_HAS_CHANGE_DRIVE_LIST))
                        | ((FSA_USE_VIRTUAL_ROOT));

   GFSI_fileCriteria =      ((FSFC_DIRS) & (~FSFC_NON_GEOS_FILES))
                          | ((FSFC_GEOS_EXECUTABLES) & (~FSFC_GEOS_NON_EXECUTABLES));

   ATTR_GEN_FILE_SELECTOR_VIRTUAL_ROOT = {SP_APPLICATION, ""};
   ATTR_GEN_PATH_DATA = {SP_APPLICATION, ""};
   HINT_FILE_SELECTOR_FILE_LIST_WIDTH = 33;
   HINT_FILE_SELECTOR_NUMBER_OF_FILES_TO_SHOW = 10;
}

@object GenTriggerClass AddAppTrigger = {
    GI_visMoniker = "=>";
    //action = MSG_SL_ADD_PROGRAM, ProgStartupList;
}

@object PrefInteractionClass OpenWithAppListGroup = {
    GI_comp =   @OpenWithAppList,
                @RemoveAppTrigger;

    HINT_ORIENT_CHILDREN_VERTICALLY;
    HINT_CENTER_CHILDREN_HORIZONTALLY;
    HINT_EXPAND_HEIGHT_TO_FIT_PARENT;
}

@object PrefAppListClass OpenWithAppList = {
    GIGI_destination = (TO_SELF);
	//GIGI_behaviorType = GIGBT_EXCLUSIVE;
    //GIGI_behaviorType = GIGBT_NON_EXCLUSIVE;

    HINT_ITEM_GROUP_SCROLLABLE;
    HINT_EXPAND_HEIGHT_TO_FIT_PARENT;
    HINT_FIXED_SIZE = {SST_AVG_CHAR_WIDTHS | 33};

    /*
    HINT_FIXED_SIZE {
        SpecWidth <SST_AVG_CHAR_WIDTHS, 24>
        SpecHeight <SST_LINES_OF_TEXT, 3>
        word	3
    },
    */
    // ATTR_GEN_ITEM_GROUP_STATUS_MSG = (word )MSG_SL_STARTUP_PROGRAM_SELECTED;
}

@object GenTriggerClass RemoveAppTrigger = {
    //genStates = default -enabled;
    GI_visMoniker = "Remove";
    //action = MSG_SL_DELETE_PROGRAM, ProgStartupList;
    HINT_EXPAND_WIDTH_TO_FIT_PARENT;
}

@end    BASEINTERFACE;

/*********************************************************************
PrefGetOptrBox
**********************************************************************/
optr    _export _pascal PrefGetOptrBox(void)
{
    return (@BaseBox);
}

/*********************************************************************
PrefGetModuleInfo
**********************************************************************/
void    _export _pascal PrefGetModuleInfo( PrefModuleInfo *modInfo )
{
    modInfo->PMI_requiredFeatures = PMF_USER;
    modInfo->PMI_prohibitedFeatures = 0;
    modInfo->PMI_minLevel = UIIL_INTRODUCTORY;
    modInfo->PMI_maxLevel = UIIL_MAX_LEVEL;

    modInfo->PMI_monikerList = @PrefMM1MonikerList; /* */
    modInfo->PMI_monikerToken.GT_chars[0] = 'P';
    modInfo->PMI_monikerToken.GT_chars[1] = 'F';
    modInfo->PMI_monikerToken.GT_chars[2] = 'A';
    modInfo->PMI_monikerToken.GT_chars[3] = 'F';
    modInfo->PMI_monikerToken.GT_manufID = MANUFACTURER_ID_APP_LOCAL;
}

/********************************************************************
METHODS
*********************************************************************/


/********************************************************************
    MSG_PREF_INIT
********************************************************************/
@method	PrefDialogMMClass, MSG_PREF_INIT
{
    @callsuper();
}

/********************************************************************
MSG_PREF_GET_PSELF
    Hilfsmessage zum Ermitteln
    von pself um �ber die
    eigenen instance Data
    andere Objekte ansprechen
    zu k�nnen.
*********************************************************************/
@method PrefDialogMMClass, MSG_PREF_GET_PSELF
{
    return pself;
}

Boolean _pascal ReadAppsCallback(const char *stringSection, word sectionNum, void* enumData)
{
    char* str;

	str = (char*) ChunkArrayAppend(*((optr*) enumData), 0); // convert voidPOINTER to optrPOINTER and deref aftwerwards...
    strcpy(str, stringSection);

    return FALSE; // no error
}

@method	PrefAppListClass, MSG_PREF_DYNAMIC_LIST_BUILD_ARRAY
{
    MemHandle       mh = NullHandle;
    ChunkHandle     ch = NullChunk;
    word            num = 0;
    // char*           str = (void*) 0;
    optr            ourList = NullOptr;

    mh = MemAllocLMem(LMEM_TYPE_GENERAL, 0);
    MemLock(mh);

    ch = ChunkArrayCreate(mh, sizeof(FileLongName), 0, 0);
    pself->appList = ConstructOptr(mh, ch);
    ourList = pself->appList;

    InitFileEnumStringSection(
        _TEXT("fileManager"),
        _TEXT("openWithFavoriteApps"),
        IFRF_READ_ALL,
        ReadAppsCallback,
        (void*) &ourList);

    num = ChunkArrayGetCount(pself->appList);

    MemUnlock(mh);

    @call oself::MSG_GEN_DYNAMIC_LIST_INITIALIZE(num);
	@call oself::MSG_GEN_ITEM_GROUP_SET_NONE_SELECTED(TRUE);

    @callsuper();
}


/*
    **Parameters:**
    *buffer* - Buffer in which to return moniker text.
    *bufSize* - Size of buffer.
    *identifier* - Identifier of item whose moniker should be returned.

    **Return:** Size of item's moniker.
*/
@method	PrefAppListClass, MSG_PREF_ITEM_GROUP_GET_ITEM_MONIKER
{
    char*   str = (void*) 0;
    word    elSize = 0;
    word    len = 0;

    MemLock(HandleOf(pself->appList));
    str = (char*) ChunkArrayElementToPtr(pself->appList, identifier, &elSize);
    len = strlen(str);
    if (len < bufSize)
    {
        strcpy(buffer, str);
        MemUnlock(HandleOf(pself->appList));
        return len;
    }
    else
    {
        MemUnlock(HandleOf(pself->appList));
        return 0;
    }
}
