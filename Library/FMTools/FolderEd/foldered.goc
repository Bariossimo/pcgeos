/***********************************************************************
 *
 *	FileManager Tool Demo
 *
 *	This sample explains how to write a FileManager tool plugin
 *	By default, the source of these plugins are located at
 *	pcgeos/Library/FMTools. More examples can be found there.
 *	The compiled geode has to be copied to ensemble/system/filemgr
 *	
 *	The structures and messages used here can be found in the file fmtool.goh.
 *	
 *	
 ***********************************************************************/

@include <stdapp.goh>
@include <fmtool.goh>
#include <Ansi/string.h>
#include <Ansi/stdio.h>
@include <foldered.goh>

/*
	To do
	- GP: XCCOMFLAGS	--> Info an MeyerK
	MeyerK:	OpenWithEntryPoint: Dilaog wird nicht vernichtet, wenn "Abbruch" gewählt
		UerseCreateDilaog statt FMTOOL Message -> ist OK
		
	

/***********************************************************************
Resources
***********************************************************************/
@start FMTData, data;
    @visMoniker FolderEditMoniker = "Edit Icon";
@end FMTData;

@start DialogUI, notDetachable;

    @object FolderEdInteractionClass SelectDialog = {
        GI_visMoniker = "Edit Icon";
        GI_comp =   @SelectFileList,
        	    @SelectReplyBar;
        GI_states = (@default & (~GS_USABLE));
        GII_visibility = GIV_DIALOG;
        GII_attrs = @default | GIA_NOT_USER_INITIATABLE | GIA_MODAL;
        HINT_PLACE_MONIKER_ABOVE;
        HINT_ORIENT_CHILDREN_VERTICALLY;
    }

    @object GenDynamicListClass SelectFileList = {
   	GI_visMoniker = "Select an object";
	HINT_PLACE_MONIKER_ABOVE;
	HINT_ITEM_GROUP_SCROLLABLE;
	HINT_FIXED_SIZE = { SST_AVG_CHAR_WIDTHS | 33,
			SST_LINES_OF_TEXT | 4, 4};
   	GDLI_queryMsg = MSG_FED_QUERY_FILE;
   	GDLI_numItems = 0;
    }

    @object GenInteractionClass SelectReplyBar ={
        GI_comp =   @SelectOkTrigger,
                    @SelectCancelTrigger;
        HINT_MAKE_REPLY_BAR;
    }

    @object GenTriggerClass SelectOkTrigger = {
    	GI_visMoniker = "OK";
    	GTI_actionMsg = MSG_FED_QUIT_DIALOG;
        ATTR_GEN_TRIGGER_ACTION_DATA = { IC_OK };
        HINT_SEEK_REPLY_BAR;
        HINT_DEFAULT_DEFAULT_ACTION;
    }

    @object GenTriggerClass SelectCancelTrigger = {
    	GI_visMoniker = "Abbrechen";
    	GTI_actionMsg = MSG_FED_QUIT_DIALOG;
        ATTR_GEN_TRIGGER_ACTION_DATA = { IC_DISMISS };
        HINT_SEEK_REPLY_BAR;
    }

@end DialogUI;


/*-------------------------------------------------------------
 *	API Struct	- tell the file manager infos about our tools
 *	MUST be global
-------------------------------------------------------------*/
FMToolStruct FMToolInfo[1] = {
    {
        @FolderEditMoniker, (FMTF_SELECTED_ONLY | FMTT_DIALOG), 1
        	/* Moniker for Tool Entry
        	 * FMTF_SELECTED_ONLY: active, onyl if a file/folder is selected
        	 * FMTT_DIALOG: a dialog will come up (see FMToolType). 
        	 * 1: number of the tool in our list (we have only one)
        	 */
    }
};

/*-------------------------------------------------------------
 *	FMFetchToolsProc GetThoseTools
 *	FileManager API Function - fetch Tools
-------------------------------------------------------------*/

word _pascal _export GetThoseTools(FMToolStruct **tablePtr)
{
    *tablePtr = (FMToolStruct*) &FMToolInfo;
    return 1;
}

static	optr		g_dialog = NullOptr;
static	MemHandle 	g_mh;


/*-------------------------------------------------------------
 *	FMToolProc FolderEdToolStart()
 *-------------------------------------------------------------
 *	GeodeHandle filemgr => Process that is subclass of FileManagerClass
 *	word toolNum =>	Entry # of activated tool within table returned by
 *                FMTF_FETCH_TOOLS
 *	word entryNum
 *
 *	The user has clicked on our Utilities menu item: "Edit Icon"
-------------------------------------------------------------*/
// stop in foldered::FolderEdToolStart
void _pascal _export FolderEdToolStart(
    GeodeHandle filemgr,
    word toolNum,
    word entryNum
)
{
SelectedFilesStruct	*fileInfo;

    /*
     * Copy our dialog template and add it to the application object
     */
    g_dialog = UserCreateDialog(@SelectDialog);
    	
    /*
     * Initialize duplicated dialog objects
     */
    @send @DialogObj(@SelectOkTrigger)::MSG_GEN_TRIGGER_SET_DESTINATION(g_dialog);
    @send @DialogObj(@SelectCancelTrigger)::MSG_GEN_TRIGGER_SET_DESTINATION(g_dialog);
    @send @DialogObj(@SelectFileList)::MSG_GEN_ITEM_GROUP_SET_DESTINATION(g_dialog);

    /*
     * Figure out the selected files and initialize the files list
     */
    g_mh = @call ConstructOptr(filemgr, 0)::MSG_FM_GET_SELECTED_FILES();
    if ( !g_mh ) return;	// be save to avoid crash, should not occur.
    
    fileInfo = MemLock(g_mh);
    @send @DialogObj(@SelectFileList)::MSG_GEN_DYNAMIC_LIST_INITIALIZE(fileInfo->header.FQTH_numFiles);
    MemUnlock(g_mh);

    /*
     * Finally, open dialog box
     */
    @send g_dialog::MSG_GEN_INTERACTION_INITIATE();


}

/*-------------------------------------------------------------
 * void MSG_FED_QUIT_DIALOG(int cmd);	
 *-------------------------------------------------------------
 *	Perform tool operation, close and destroy dialog box
 *
 *
-------------------------------------------------------------*/
// stop in foldered::FolderEdInteractionFED_QUIT_DIALOG
@method FolderEdInteractionClass, MSG_FED_QUIT_DIALOG {

    if(cmd == IC_OK) {
    }

    UserDestroyDialog(g_dialog); // close and destroy the dialog
    if (g_mh) MemFree(g_mh);
}


/*-------------------------------------------------------------
 * MSG_FED_QUERY_FILE	
 *-------------------------------------------------------------
 *	void GEN_DYNAMIC_LIST_QUERY_MSG (optr list, word item);
 *	Update item moniker in the file list
-------------------------------------------------------------*/
// stop in foldered::FolderEdInteractionFED_QUERY_FILE
@method FolderEdInteractionClass, MSG_FED_QUERY_FILE {
FileLongName		fName;
SelectedFilesStruct	*fileInfo;

    if (!g_mh) strcpy(fName, "---");
    else {
	fileInfo = MemLock(g_mh);
	strcpy(fName, fileInfo->entry[item].FOIE_name);
	MemUnlock(g_mh);	
    }
    @send list::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_TEXT(item, fName);
}
