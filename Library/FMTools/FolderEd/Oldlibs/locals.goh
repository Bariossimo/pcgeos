
/*---------------------------------------------------------------------------
	File:	locals.goh
		Definitionen usw. die nicht fÅr das Interface bestimmt sind
		RS Token Edit Libeary
 ---------------------------------------------------------------------------*/
@include <stdapp.goh>
@include "Oldlibs/rstoked.goh"

// Zugriff auf die Children des Dialogs
@define GetChildOptr(childNr) @call oself::MSG_GEN_FIND_CHILD_AT_POSITION(childNr);
// Zugriff auf die Children eines Childs
@define GetChildOptrOf(op,childNr) @call op::MSG_GEN_FIND_CHILD_AT_POSITION(childNr);

/* Konstanten, die die Reihenfolge der Children in IconEditDialogClass-
   Objekten angeben. Wichtig! Bei énderungen unbedingt *ALLE* Objekt-Definitionen
   mit Ñndern!!!!! */
#define DIALOG_CHILD_MONIKER_LIST		0
#define DIALOG_CHILD_INFO_GROUP			1
#define DIALOG_CHILD_RANGE_GROUP		2
#define DIALOG_CHILD_OK_TRIGGER			3
#define DIALOG_CHILD_EXTRA_TRIGGER		4			

// Konstanten, die die Reihenfolge in der InfoGroup angeben
#define INFO_CHILD_COUNT	0
#define INFO_CHILD_ID_LABEL	1
#define INFO_CHILD_ID_TEXT	2
// Konstanten, die die Reihenfolge in der RangeGroup angeben
#define RANGE_CHILD_MIN_VALUE	0
#define RANGE_CHILD_MAX_VALUE	1
#define RANGE_CHILD_APPLY_TRIGGER	2

// Reihenfolge der Childeren der FeatureFlagsSelectorGroup
#define FEATURE_CHILD_FEATURE_SELECTOR	0


@ifndef @WriteTokenIDString
@define WriteTokenIDString(buf,tok)  { sprintf(buf,"%c%c%c%c,%u",tok.GT_chars[0],\
			tok.GT_chars[1],tok.GT_chars[2],tok.GT_chars[3],tok.GT_manufID);}
@endif

@ifndef @SetTokenTo
@define 	SetTokenTo(tok,a,b,c,d,n)   {	(tok).GT_chars[0]=a; (tok).GT_chars[1]=b;\
	(tok).GT_chars[2]=c; (tok).GT_chars[3]=d; (tok).GT_manufID=n;}
@endif

/*---------------------------------------------------------------------------
 Klassendefinition IconEditDialogClass  : Dialog zum éndern des Icons
 ---------------------------------------------------------------------------*/
@class IE_DialogClass, GenInteractionClass;

	@instance GeodeToken IEDI_token;	/* aktuelles Icon */
	@instance word	     IEDI_flags;	/* IEF_xxx - Flags */
	@instance MemHandle  IEDI_tokenList; 	/* Liste, die angezeigt wird */
	@instance word	     IEDI_tokenCount;
	@instance MemHandle  IEDI_baseList; 	/* Liste, die maximal angezeigt */
	@instance word	     IEDI_baseCount;	/* werden kann. Default: alle Token*/
	/*message MSG_IED_CREATE_LISTS(MemHandle baseList, Boolean onlyGString);
			Null, wenn baselist aus TokenDatabase gelesen werden soll
			onlyGString TRUE, wenn Text moniker dabei ignoriert
			werden sollen
	!! der MemBlock von IEDI_tokenList ist immer so gross, dass die ganze
	baselist reinpasst, auch wenn kein Icon enthalten ist. Die Messages
	verlassen sich auf diesen Fakt !!
	message MSG_IED_DESTROY_LISTS(Boolean preverseBaseList) ??  */
	@message (GEN_DYNAMIC_LIST_QUERY_MSG) MSG_IED_QUERY_TOKEN;
	@message (GEN_ITEM_GROUP_APPLY_MSG) MSG_IED_TOKEN_SELECTED;
	@message	void	MSG_IED_MANUFID_APPLAY_TRIGGER_SELECTED();
	@message	void	MSG_IED_GET_ICON(GeodeToken *tok);
	@message	void	MSG_IED_INIT(GeodeToken tok,
					RangeParams *range,
					IconEditFeatureFlags flags,
					char* helpContext,
					optr dialogMoniker, optr okTriggerMoniker,
					optr extraTriggerMoniker);
					/* Initialisieren des Dialogs */
					/* Liste initalisieren, destinations setzen usw. */
	@message	void	MSG_IED_RESET(RangeParams *range);
	@message	void	MSG_IED_DELETE_TOKEN(int triggerID);

@endc


/*---------------------------------------------------------------------------
 Local verwendete Tool-Routinen
 ---------------------------------------------------------------------------*/
void InitSelectDialog(optr dialog);

