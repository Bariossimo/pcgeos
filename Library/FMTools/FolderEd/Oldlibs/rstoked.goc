/*  Standard include files */
@include <stdapp.goh>
#include <stdio.h>
#include <string.h>
#include <token.h>

@include "Oldlibs/rstoked.goh"
@include "Oldlibs/locals.goh"
@include "Oldlibs/tokedui.goh"
@include "Oldlibs/toktoolinternals.goh"

@include "Oldlibs/rstoks.goh"

/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  +                                                                         +
  +		Exportierte Routinen					    +
  +                                                                         +
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

extern int EXPORT IconEditSelectToken(GeodeToken *tok,	RangeParams *range,
	IconEditFeatureFlags flags, char* helpContext) {
@if 1	
	return IconEditSelectTokenDialog(tok, range, flags, helpContext,
		@IconEditMoniker, @IconEditApplyTriggerMoniker,0);
@endif		
	}

extern int EXPORT IconEditSelectTokenDialog(GeodeToken *tok,
		RangeParams *range, IconEditFeatureFlags flags,
		char* helpContext, optr dialogMoniker,
		optr okTriggerMoniker, optr extraTriggerMoniker) {
@if 1
/* Auswahl eines Token aus der Token-Database
	tok:	ausgewÑhltes Token (falls IC_OK oder IC_YES)
		wenn beim Aufruf belegt: Liste wird auf diesen Startwert eingestellt
	range:	EinschrÑnkung des Bereichs anzuzeigender Token
		NullPtr wenn keine EinschrÑnkung erforderlich
		range->baseList: TokenListe, aus der ausgewÑhlt werden soll
			- Null, wenn Liste aud der Token-Database erstellt werden soll
			- falls nicht Null: range->baseCount MUSS belegt sein
			* baseList wird von Routine NICHT verÑndert
		range->minID, maxID: Startwerte fÅr EinschrÑnkung des
			ManufID-Bereichs. Wederden an die WordValues Åbergeben
			* énderungen dieser Werte werden ans rufende Programm
			  zurÅckgegeben, so das ein konsitentes Verhalten
			  erzeugt werden kann.
	flags	IconEditFeatureFlags. Bestimmen die Eigenschaften des Dialogs
	*/

int ret;
optr dialog;

	dialog = UserCreateDialog(@IconEditDialog);
	@call dialog::MSG_IED_INIT(*tok, range, flags, helpContext,
		dialogMoniker,	okTriggerMoniker, extraTriggerMoniker);

	do {
		ret = UserDoDialog(dialog);
		} while ( ret == IC_HELP);

	if ( (ret == IC_OK) | (ret == IC_YES) ) {
		@call dialog::MSG_IED_GET_ICON(tok);
		}
	@call dialog::MSG_IED_RESET(range);
	UserDestroyDialog(dialog);
	return ret;
@endif	
}



/* pos: CCO_LAST | CCO_FIRST oder einfach positionsNr. des neuen Childs */
extern optr EXPORT IconEditAttachFlagSelector( optr parent, word pos,
			word defaultSettedFlags,
			word flagsToModify,
			Boolean isMenuEntry) {
@if 1
optr group, featureFlagsSelector, oneBool;
word n, flagBit;
MemHandle nBlock;


	nBlock = ObjDuplicateResource(OptrToHandle(@FeatureFlagsSelectorGroup),0,-1);
	group = ConstructOptr(
		nBlock,OptrToChunk(@FeatureFlagsSelectorGroup));
	@call parent::MSG_GEN_ADD_CHILD(group,CCF_MARK_DIRTY | pos);

/* Booleas initialisieren:
	einschalten und / oder NOT Usable setzen */
	featureFlagsSelector = @call group::
		MSG_GEN_FIND_CHILD_AT_POSITION(FEATURE_CHILD_FEATURE_SELECTOR);

	for ( n = 0, flagBit = 1; n < 16; n++, flagBit <<= 1) {
		oneBool = @call featureFlagsSelector::
				MSG_GEN_BOOLEAN_GROUP_GET_BOOLEAN_OPTR(flagBit);
		if ( oneBool ) { // Child gefunden-> modifizieren
			if ( flagBit & defaultSettedFlags )
				@send featureFlagsSelector::
					MSG_GEN_BOOLEAN_GROUP_SET_BOOLEAN_STATE(
					flagBit, TRUE);
			if ( !(flagBit & flagsToModify) )
				@send oneBool::MSG_GEN_SET_NOT_USABLE(VUM_NOW);
			}
		}
	if ( isMenuEntry ) @call group::MSG_GEN_INTERACTION_SET_VISIBILITY(GIV_POPUP);
	@call group::MSG_GEN_SET_USABLE(VUM_NOW);

	return group;
@endif
}

extern word EXPORT IconEditGetFlagsFromSelector(optr selector) {
@if 1
optr featureFlagSelector;
word val;

	featureFlagSelector = @call selector::
		MSG_GEN_FIND_CHILD_AT_POSITION(FEATURE_CHILD_FEATURE_SELECTOR);
	val = @call featureFlagSelector::
		MSG_GEN_BOOLEAN_GROUP_GET_SELECTED_BOOLEANS();
	return val;
@endif
}

extern void EXPORT IconEditSetFlagsOfSelector(optr selector, word flagsToSet) {
@if 1
optr featureFlagSelector;

	featureFlagSelector = @call selector::
		MSG_GEN_FIND_CHILD_AT_POSITION(FEATURE_CHILD_FEATURE_SELECTOR);
	@call featureFlagSelector::
		MSG_GEN_BOOLEAN_GROUP_SET_GROUP_STATE(flagsToSet,0);
@endif
}

extern void EXPORT IconEditTokenDeleter(GeodeToken *tok, RangeParams *range,
	IconEditFeatureFlags flags, char* helpContext) {
@if 1
optr dialog, obj;
int	ret;
GeodeToken	lTok = { 0,0,0,0,0};	// lokaler Wert fÅr Token

	if ( tok ) lTok = *tok;		// evt Åbergebens Token verwenden

	dialog = UserCreateDialog(@TokenDelDialog);
	@call dialog::MSG_IED_INIT(lTok, range, flags, helpContext,
			@IconDeleteMoniker, @IconEditDeleteTriggerMoniker,
			@IconEditDeleteAndReadyTriggerMoniker);

	obj = @call dialog::MSG_GEN_FIND_CHILD_AT_POSITION(DIALOG_CHILD_OK_TRIGGER);
	@send obj::MSG_GEN_TRIGGER_SET_DESTINATION(dialog);
	obj = @call dialog::MSG_GEN_FIND_CHILD_AT_POSITION(DIALOG_CHILD_EXTRA_TRIGGER);
	@send obj::MSG_GEN_TRIGGER_SET_DESTINATION(dialog);

	do {
		ret = UserDoDialog(dialog);
		} while ( ret == IC_HELP);

	if ( ret == IC_YES ) {
		if ( tok ) @call dialog::MSG_IED_GET_ICON(tok);
		}
	@call dialog::MSG_IED_RESET(range);
	UserDestroyDialog(dialog);
@endif
}



/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  +                                                                         +
  +		Tool-Routinen, nicht exportiert                             +
  +                                                                         +
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  +                                                                         +
  +		CODE fÅr IconEditDialogClass                                      +
  +                                                                         +
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
@classdecl	IE_DialogClass;

/*--------------------- MSG_IED_QUERY_TOKEN ---------------------
 *	Aufgabe:
 *	Zusammenhang:
 *	Strategie:
 *	Parameter:
 ---------------------------------------------------------------------------*/
@method IE_DialogClass, MSG_IED_QUERY_TOKEN {
@if 1
GeodeToken t;
	TokGetTokenFromTokenList(item,pself->IEDI_tokenList,&t);
	@call list::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_MONIKER(item,
			0,30,48,0,VMDT_TOKEN,VMST_FPTR,(dword)&t);
@endif
}
/*--------------------- MSG_IED_TOKEN_SELECTED ---------------------
 *	Aufgabe:
 *	Zusammenhang:
 *	Strategie:
 *	Parameter:
 ---------------------------------------------------------------------------*/

@method IE_DialogClass, MSG_IED_TOKEN_SELECTED {
@if 1
GeodeToken t;
char buffer[20];
optr child;

    TokGetTokenFromTokenList(selection,pself->IEDI_tokenList,&t);
    if (selection >= pself->IEDI_tokenCount) {MessageBox("Ups!");}
    pself->IEDI_token = t;

    child = @GetChildOptr(DIALOG_CHILD_OK_TRIGGER);
    @send child::MSG_GEN_SET_ENABLED(VUM_NOW);
    child = @GetChildOptr(DIALOG_CHILD_EXTRA_TRIGGER);
    @send child::MSG_GEN_SET_ENABLED(VUM_NOW);

    if ( pself->IEDI_flags & IEF_HAS_INFO_GROUP ) {
	   @WriteTokenIDString(buffer,t);
	   child = @GetChildOptr(DIALOG_CHILD_INFO_GROUP);
	   child = @GetChildOptrOf(child,INFO_CHILD_ID_TEXT);
	   @call child::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(buffer,VUM_NOW);
	   }

@endif
}


/*--------------------- MSG_IED_MANUFID_APPLAY_TRIGGER_SELECTED ---------------------
 *	Aufgabe:	Neu Darstellen der Liste mit eingeschrÑnketem manufID-Bereich
 *	Zusammenhang:
 *	Strategie:
 *	Parameter:
 ---------------------------------------------------------------------------*/
@method	IE_DialogClass, MSG_IED_MANUFID_APPLAY_TRIGGER_SELECTED	{
@if 1
word	min,max,oldSelection;
int i,n;
GeodeToken	oldToken, *bl, *p;
optr 	group, obj;

	group = @GetChildOptr(DIALOG_CHILD_RANGE_GROUP);
	obj = @GetChildOptrOf(group,RANGE_CHILD_MIN_VALUE);
	min = @call obj::MSG_GEN_VALUE_GET_VALUE();
	obj = @GetChildOptrOf(group,RANGE_CHILD_MAX_VALUE);
	max = @call obj::MSG_GEN_VALUE_GET_VALUE();
	if ( min > max ) {
			word tmp;
			@call obj::MSG_GEN_VALUE_SET_VALUE(min,FALSE);
			obj = @GetChildOptrOf(group,RANGE_CHILD_MIN_VALUE);
			@call obj::MSG_GEN_VALUE_SET_VALUE(max,FALSE);
			tmp = max;
			max = min;
			min = tmp;
			}

	obj = @GetChildOptr(DIALOG_CHILD_MONIKER_LIST);
	oldSelection = @call obj::MSG_GEN_ITEM_GROUP_GET_SELECTION();
	if ( oldSelection != 0xFFFF ) {	/* es ist einer selektiert */
		TokGetTokenFromTokenList(oldSelection,pself->IEDI_tokenList,&oldToken);
		}
		else {
		     @SetTokenTo(oldToken,0,0,0,0,0);/* Leertoken - zur Sicherheit */
		     }

/* neue Liste Zusammenstellen */
	pself = ObjDerefGen(oself);
	bl = MemLock(pself->IEDI_baseList);
	p = MemLock(pself->IEDI_tokenList);
	i=0;
	pself->IEDI_tokenCount = 0;
	while ( i< pself->IEDI_baseCount ) {
		if (( bl->GT_manufID >= min ) && ( bl->GT_manufID <= max )) {
			*p = *bl; p++; pself->IEDI_tokenCount++;
			}
		bl++; i++;
		}
	MemUnlock(pself->IEDI_tokenList);
	MemUnlock(pself->IEDI_baseList);

	obj = @GetChildOptr(DIALOG_CHILD_MONIKER_LIST);
	@send obj::MSG_GEN_DYNAMIC_LIST_INITIALIZE(pself->IEDI_tokenCount);
	pself = ObjDerefGen(oself);

	if ( pself->IEDI_flags & IEF_HAS_INFO_GROUP ) {
		group = @GetChildOptr(DIALOG_CHILD_INFO_GROUP);
		obj = @GetChildOptrOf(group,INFO_CHILD_COUNT);
		@send obj::MSG_GEN_VALUE_SET_INTEGER_VALUE(pself->IEDI_tokenCount,FALSE);
		}

/* eventuell alte Selektion wieder herstellen */
	n = TokGetItemFromTokenList(pself->IEDI_tokenList,
			pself->IEDI_tokenCount, oldToken);
	if ( n != -1) {
		obj = @GetChildOptr(DIALOG_CHILD_MONIKER_LIST);
		@send obj::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(n,FALSE);

		obj = @GetChildOptr(DIALOG_CHILD_OK_TRIGGER);
		@send obj::MSG_GEN_SET_ENABLED(VUM_NOW);
		obj = @GetChildOptr(DIALOG_CHILD_EXTRA_TRIGGER);
		@send obj::MSG_GEN_SET_ENABLED(VUM_NOW);
		}
	   else {
		obj = @GetChildOptr(DIALOG_CHILD_OK_TRIGGER);
		@send obj::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
		obj = @GetChildOptr(DIALOG_CHILD_EXTRA_TRIGGER);
		@send obj::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
		group = @GetChildOptr(DIALOG_CHILD_INFO_GROUP);
		obj = @GetChildOptrOf(group,INFO_CHILD_ID_TEXT);
		@call obj::MSG_GEN_REPLACE_VIS_MONIKER_TEXT("-",VUM_NOW);
		}
@endif
}


@method	IE_DialogClass, MSG_IED_GET_ICON {
@if 1
	*tok = pself->IEDI_token;
@endif
}


@method	IE_DialogClass, MSG_IED_INIT {
/* void (GeodeToken tok, RangeParams *range, IconEditFeatureFlags flags,
	char* helpContext
	optr dialogMoniker, optr okTriggerMoniker,optr extraTriggerMoniker);*/
@if 1
optr obj, group;
int n;
dword listInfo;
void * s, *d;
Boolean useFlag;	// TRUE, wenn range->baseList verwendet werden soll

	pself -> IEDI_flags = flags;
	@send oself::MSG_GEN_REPLACE_VIS_MONIKER_OPTR(dialogMoniker,VUM_NOW);
	obj = @GetChildOptr(DIALOG_CHILD_OK_TRIGGER);
	@send obj::MSG_GEN_REPLACE_VIS_MONIKER_OPTR(okTriggerMoniker,VUM_NOW);
	pself = ObjDerefGen(oself);
	if ( extraTriggerMoniker ) {
		obj = @GetChildOptr(DIALOG_CHILD_EXTRA_TRIGGER);
		@send obj::MSG_GEN_REPLACE_VIS_MONIKER_OPTR
						(extraTriggerMoniker,VUM_NOW);
		@send obj::MSG_GEN_SET_USABLE(VUM_NOW);
		}


// Edit-Listen anlegen, ect Åbergebene baseList verwenden
	if ( !(range) ) 	{
			useFlag = FALSE;
			}
		else	{
			if ( range->baseList ) 	useFlag = TRUE;
				else            useFlag = FALSE;
			}
	if (useFlag) {
		pself->IEDI_baseList = range->baseList;
		pself->IEDI_baseCount = range->baseCount;
		}
	else {
		word	rangeFlags = 0;
		if (flags & IEF_GSTRING_ONLY)
						rangeFlags |= TRF_ONLY_GSTRING;
		listInfo = TokenListTokens(rangeFlags,0,0);
		pself->IEDI_baseList = TokenListTokensHandleFromDWord(listInfo);
		pself->IEDI_baseCount = TokenListTokensCountFromDWord(listInfo);
		}

// Base-List kopieren
	pself->IEDI_tokenCount = pself->IEDI_baseCount;
	pself->IEDI_tokenList = MemAlloc((pself->IEDI_baseCount) * sizeof(GeodeToken),
			HF_SHARABLE | HF_SWAPABLE, HAF_ZERO_INIT | HAF_LOCK);

	d = MemDeref(pself->IEDI_tokenList);
	s = MemLock(pself->IEDI_baseList);
	memcpy(d,s,(pself->IEDI_baseCount) * sizeof(GeodeToken));
	MemUnlock(pself->IEDI_baseList);
	MemUnlock(pself->IEDI_tokenList);


/* Moniker-Liste initialisieren */
	obj = @GetChildOptr(DIALOG_CHILD_MONIKER_LIST);
	@send obj::MSG_GEN_ITEM_GROUP_SET_DESTINATION(oself);
	@send obj::MSG_GEN_DYNAMIC_LIST_INITIALIZE(pself->IEDI_tokenCount);
	pself = ObjDerefGen(oself);

	n = TokGetItemFromTokenList(pself->IEDI_tokenList, pself->IEDI_tokenCount,tok);
	obj = @GetChildOptr(DIALOG_CHILD_MONIKER_LIST);
	if ( n != -1) {
		@send obj::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(n,FALSE);
		@send obj::MSG_GEN_ITEM_GROUP_SET_MODIFIED_STATE(TRUE);
		@send obj::MSG_GEN_APPLY();
		}
	else {
		@send obj::MSG_GEN_ITEM_GROUP_SET_NONE_SELECTED(FALSE);
		@send obj::MSG_GEN_ITEM_GROUP_MAKE_ITEM_VISIBLE(0);
		}
/* Info-Group initalisieren */
	group = @GetChildOptr(DIALOG_CHILD_INFO_GROUP);
	if ( pself->IEDI_flags & IEF_HAS_INFO_GROUP ) {
		obj = @GetChildOptrOf(group,INFO_CHILD_COUNT);
		@send obj::MSG_GEN_VALUE_SET_INTEGER_VALUE(pself->IEDI_tokenCount,FALSE);
		}
	   else {	/* keine Info_group */
		@send group::MSG_GEN_SET_NOT_USABLE(VUM_NOW);
		}

/* Range-Group initialisieren */
	group = @GetChildOptr(DIALOG_CHILD_RANGE_GROUP);
	if ( pself->IEDI_flags & IEF_HAS_RANGE_GROUP ) {
		/* TRigger-Destinations setzen */
		obj = @GetChildOptrOf(group,RANGE_CHILD_APPLY_TRIGGER);
		@send obj::MSG_GEN_TRIGGER_SET_DESTINATION(oself);
		}
	  else 	{	/* keine Range-Group */
		@send group::MSG_GEN_SET_NOT_USABLE(VUM_NOW);
		}
	/* BereichseinschrÑnkung, falls range-Parameter Åbergeben ,
	   wirkt auch dann, wenn Range-Group nicht sichtbar ist */
	if ( range ) {
		obj = @GetChildOptrOf(group,RANGE_CHILD_MIN_VALUE);
		@call obj::MSG_GEN_VALUE_SET_VALUE(range->minID,FALSE);
		obj = @GetChildOptrOf(group,RANGE_CHILD_MAX_VALUE);
		@call obj::MSG_GEN_VALUE_SET_VALUE(range->maxID,FALSE);
		// Range Trigger-Apply senden, damit BereichseinschrÑnkung
		// auch wirksam wird
		@call oself::MSG_IED_MANUFID_APPLAY_TRIGGER_SELECTED();
		}

/* HelpContext setzen -> Help-Trigger erscheint */
	if ( helpContext )		// Nullpointer ausbremsen
	   if ( strlen(helpContext) ) {	// LÑnge Null ausbremsen
		@call oself::MSG_META_ADD_VAR_DATA(ATTR_GEN_HELP_CONTEXT,
				sizeof(FileLongName),helpContext);
		}

/* Grî·e der Moniker-Liste Ñndern, falls nîtig */
	obj = @GetChildOptr(DIALOG_CHILD_MONIKER_LIST);
	if ( flags & ( 	IEF_ICONS_LARGE | IEF_LIST_LARGE ) ) {
		CompSizeHintArgs ml = {SST_PIXELS | 704,SST_PIXELS | 44,11},
				 ms = {SST_PIXELS | 560,SST_PIXELS | 40,11},
				 nl = {SST_PIXELS | 448,SST_PIXELS | 44,7},
				 newSize;
		switch ( flags & ( IEF_ICONS_LARGE | IEF_LIST_LARGE ) ) {
		      case ( IEF_ICONS_LARGE | IEF_LIST_LARGE ):
				newSize = ml;
				break;
		      case ( IEF_ICONS_LARGE ):
				newSize = nl;
				break;
		      case ( IEF_LIST_LARGE ):
				newSize = ms;
				break;
		      }
		@call obj::MSG_META_ADD_VAR_DATA(HINT_INITIAL_SIZE,
				sizeof(CompSizeHintArgs),
				&newSize);
		}

	@call obj::MSG_GEN_SET_USABLE(VUM_NOW);
@endif
}

@method	IE_DialogClass, MSG_IED_RESET {
@if 1
/*void (RangeParams *range)*/
/* Interne Datenstrukturen zerstîren und Speicher freigeben */
optr group, obj;

	MemFree(pself->IEDI_tokenList); 	/* Liste, die angezeigt wird */
	pself->IEDI_tokenList = 0;
	pself->IEDI_tokenCount = 0;
	if ( range ) {	// Range wurde Åbergeben
		/* BereichseinschrÑnkung zurÅckliefern, falls editierbar */
		group = @GetChildOptr(DIALOG_CHILD_RANGE_GROUP);
		if ( pself->IEDI_flags & IEF_HAS_RANGE_GROUP ) {
			obj = @GetChildOptrOf(group,RANGE_CHILD_MIN_VALUE);
			range->minID = @call obj::MSG_GEN_VALUE_GET_VALUE();
			obj = @GetChildOptrOf(group,RANGE_CHILD_MAX_VALUE);
			range->maxID = @call obj::MSG_GEN_VALUE_GET_VALUE();
			}
		/* baseList bleibt erhalten,
		   wenn sie als Handle Åbergeben wurde */
		if ( (range->baseList) != 0) {
			/* Handle Null: Basis-Liste freigeben */
			MemFree(pself->IEDI_baseList);
			pself->IEDI_baseList = 0;
			pself->IEDI_baseCount = 0;
			}
		}
	   else	{	// range ist Null-Pointer
		MemFree(pself->IEDI_baseList); 	/* Basis-Liste Freigeben */
		pself->IEDI_baseList = 0;
		pself->IEDI_baseCount = 0;
		}
@endif
}


@method	IE_DialogClass, MSG_IED_DELETE_TOKEN  {
@if 1
Boolean doDelete;
GeodeToken	tok;
char	tText[20];

	if (pself->IEDI_flags & IEF_WARN_APPLY) {
		doDelete = WarningMsgBox_2(@WarningDeleteToken, 0, 0) == IC_YES;
		}
	   else doDelete = TRUE;

	if ( doDelete ) {
		@send application::MSG_GEN_APPLICATION_MARK_BUSY();
		@call self::MSG_IED_GET_ICON(&tok);
		if ( !TokenRemoveToken(TOKEN_CHARS_fixed(tok.GT_chars[0],
			tok.GT_chars[1],tok.GT_chars[2],tok.GT_chars[3]),
			tok.GT_manufID) )
			{
			ConfirmParams  cp;
			/* Fehler beim Lîschen: Info und Katastrophenhandling */
			@send application::MSG_GEN_APPLICATION_MARK_NOT_BUSY();
			@WriteTokenIDString(tText,tok);
			ErrorMsgBox_2(@ErrorDeleteToken,tText,0);
			doDelete = FALSE;		// Liste nicht neu machen
			@send application::MSG_GEN_APPLICATION_MARK_BUSY();

			/* tokenListe pröfen */
			cp.confirmList = 0;
			cp.confirmFlags = CF_DO_NOT_RETURN_CONFIRM_LIST
					| CF_WARN_IF_INVALID_LIST;
			pself = ObjDerefGen(oself);
			TokConfirmTokenList(&cp,
				pself->IEDI_baseList,&(pself->IEDI_baseCount));
			@call oself::MSG_IED_MANUFID_APPLAY_TRIGGER_SELECTED();
			}
		@send application::MSG_GEN_APPLICATION_MARK_NOT_BUSY();
		}

	if ( triggerID == 1 ) {	// Dialog beenden
		@send oself::MSG_GEN_GUP_INTERACTION_COMMAND(IC_YES);
		}
	else {			// Liste neu initialisieren
	     if (doDelete) {
		TokDeleteTokenFromTokenList(pself->IEDI_baseList,
				&(pself->IEDI_baseCount),tok);
		@call oself::MSG_IED_MANUFID_APPLAY_TRIGGER_SELECTED();
		}               // end of doDelete-> init List
	     }                  // end of else

@endif
}   			// end of procedure


/*###########################################################################
 #      Ende der Library
 ###########################################################################*/

