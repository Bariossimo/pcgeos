/**************************************************************************
 *	Project: IconEdit file manager tool
 *
 *	File:	foldered.goc
 *
 *		
 *
 *	By RABE-Soft, Rainer Bettsteller, for Free PC/GEOS Project
 *
 **************************************************************************/

@include <stdapp.goh>
@include <fmtool.goh>
#include <Ansi/string.h>
#include <Ansi/stdio.h>
#include <token.h>

@include "foldered.goh"
@include "UI/fedui.goh"

static	optr		g_dialog = NullOptr;
static	MemHandle 	g_mh;
static	GeodeToken	g_selectedToken;
static 	MemHandle 	g_tokenList = 0;	/* List of all Tokens in the TokenDB */
static 	word		g_displaySize = DEFAULT_TOKEN_DISPLAY_SIZE;
static 	word		g_tokenStyle = DEFAULT_TOKEN_STYLE;

/*
	
	To do
	
	- cLEAR tOKEN bUTTON -> ja
	
	- Bezeichnung TOken / Icon noch mal durchdenken - nur Folders evtl doch besser Icon?
	
		
	!! In build-Process includen
	!! in Filetree
	!! Übersetzungsdatei
*/



/*-------------------------------------------------------------
 *	API Struct	- tell the file manager infos about our tools
 *	MUST be global
-------------------------------------------------------------*/
FMToolStruct FMToolInfo[1] = {
    {
        @FolderEditMoniker, (FMTF_SELECTED_ONLY | FMTT_DIALOG), 1
        	/* Moniker for Tool Entry
        	 * FMTF_SELECTED_ONLY: active, onyl if a file/folder is selected
        	 * FMTT_DIALOG: a dialog will come up (see FMToolType). 
        	 * 1: number of the tool in our list (we have only one)
        	 */
    }
};

/*-------------------------------------------------------------
 *	FMFetchToolsProc GetThoseTools
 *	FileManager API Function - fetch Tools
-------------------------------------------------------------*/

word _pascal _export GetThoseTools(FMToolStruct **tablePtr)
{
    *tablePtr = (FMToolStruct*) &FMToolInfo;
    return 1;
}


/*-------------------------------------------------------------
 *	FMToolProc FolderEdToolStart()
 *-------------------------------------------------------------
 *	GeodeHandle filemgr => Process that is subclass of FileManagerClass
 *	word toolNum =>	Entry # of activated tool within table returned by
 *                FMTF_FETCH_TOOLS
 *	word entryNum
 *
 *	The user has clicked on our Utilities menu item: "Edit Folder Icon"
-------------------------------------------------------------*/
// stop in foldered::FolderEdToolStart
void _pascal _export FolderEdToolStart(
    GeodeHandle filemgr,
    word toolNum,
    word entryNum
)
{
SelectedFilesStruct	*fileInfo;
word	count;

{word x = toolNum; x= entryNum; x=x; }	// supress compiler warning

    /*
     * Copy our dialog template and add it to the application object
     */
    g_dialog = UserCreateDialog(@SelectDialog);
    	
    /*
     * Initialize duplicated dialog objects
     */
    @send @DialogObj(@SelectOkTrigger)::MSG_GEN_TRIGGER_SET_DESTINATION(g_dialog);
    @send @DialogObj(@ClearTokenTrigger)::MSG_GEN_TRIGGER_SET_DESTINATION(g_dialog);
    @send @DialogObj(@SelectCancelTrigger)::MSG_GEN_TRIGGER_SET_DESTINATION(g_dialog);
    @send @DialogObj(@SelectFolderList)::MSG_GEN_ITEM_GROUP_SET_DESTINATION(g_dialog);
    @send @DialogObj(@FEDTokenList)::MSG_GEN_ITEM_GROUP_SET_DESTINATION(g_dialog);
    @send @DialogObj(@FEDManufIDApplayTrigger)::MSG_GEN_TRIGGER_SET_DESTINATION(g_dialog);
    @send @DialogObj(@FEDDisplaySizeSelector)::MSG_GEN_ITEM_GROUP_SET_DESTINATION(g_dialog);
    @send @DialogObj(@FEDTokenStyleSelector)::MSG_GEN_ITEM_GROUP_SET_DESTINATION(g_dialog);
    

    /*
     * Figure out the selected folders
     */
    g_mh = @call ConstructOptr(filemgr, 0)::MSG_FM_GET_SELECTED_FILES();
    if ( !g_mh ) return;	// be save to avoid crash, should not occur.
    
    count = FEDLookForFoldersInList();
    if (!count) {
    	/*
    	 * No Folders selected. Exit cleanly
    	 */
    	ErrorBoxOptr(@ErrorNoFolders);
    	UserDestroyDialog(g_dialog);
    	MemFree(g_mh);
    	g_mh = 0;
    	return;
    }
    
    /*
     * Create list of tokens and initialize the FEDTokenList
     */
    count = FEDListTokens();
    @send @DialogObj(@FEDTokenList)::MSG_GEN_DYNAMIC_LIST_INITIALIZE(count);
    
    /*
     * Initialize the folder list
     */
    fileInfo = MemLock(g_mh);
    @send @DialogObj(@SelectFolderList)::MSG_GEN_DYNAMIC_LIST_INITIALIZE(fileInfo->header.FQTH_numFiles);
    @send @DialogObj(@SelectFolderList)::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(0, FALSE);
    @send @DialogObj(@SelectFolderList)::MSG_GEN_ITEM_GROUP_SET_MODIFIED_STATE(TRUE);
    @send @DialogObj(@SelectFolderList)::MSG_GEN_APPLY();
    MemUnlock(g_mh);

    
    @send  @DialogObj(@FEDIconInfoCount)::MSG_GEN_VALUE_SET_INTEGER_VALUE(count, FALSE);
    @send  @DialogObj(@FEDIconInfoDisplayed)::MSG_GEN_VALUE_SET_INTEGER_VALUE(count, FALSE);

    /*
     * Finally, open dialog box
     */
    @send g_dialog::MSG_GEN_INTERACTION_INITIATE();

}

/*-------------------------------------------------------------
 *	FEDShowToken
 *-------------------------------------------------------------
 *	Display Icon Moniker and ID
 -------------------------------------------------------------*/
// swat stop in foldered::FEDShowToken
void  FEDShowToken(GeodeToken tok, optr idObj, optr monikerObj) {
#define NUM_CHARS_IN_ID	10
char buf[NUM_CHARS_IN_ID + 2];


    FEDTokenIdToText(tok,NUM_CHARS_IN_ID, buf);
    @call idObj::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(buf, 0);
    
    FEDShowTokenMoniker(tok, monikerObj);

}

/*-------------------------------------------------------------
 *	FEDShowFolderToken
 *-------------------------------------------------------------
 *	Read and Display Icon for a folder
 *	Return: currently used token
 -------------------------------------------------------------*/
GeodeToken FEDShowFolderToken(char *fileName,	DiskHandle dh, char *path) {
optr idObj, monikerObj;
word fileAttrs;
GeodeToken fileToken, creatorToken;
GeosFileType fileType;
FileExtAttrDesc	attrDesc[4];	/* Array 0..3 */

  FilePushDir();
  FileSetCurrentPath(dh,path);


  /* Read extended attributes */
  @SetAttrDesc(attrDesc[0],FEA_TOKEN,&fileToken,sizeof(GeodeToken));
  @SetAttrDesc(attrDesc[1],FEA_CREATOR,&creatorToken,sizeof(GeodeToken));
  @SetAttrDesc(attrDesc[2],FEA_FILE_TYPE,&fileType,sizeof(GeosFileType));
  @SetAttrDesc(attrDesc[3],FEA_FILE_ATTR,&fileAttrs,1);
  FileGetPathExtAttributes(fileName,FEA_MULTIPLE,attrDesc,4);

  /* Display information */
  idObj = @DialogObj(@TokenTokenID);
  monikerObj = @DialogObj(@TokenTokenDisplay);
  FEDShowToken(fileToken, idObj, monikerObj);
  

  FilePopDir();
  
  return fileToken;
  }



/*-------------------------------------------------------------
 * FEDLookForFoldersInList	
 *-------------------------------------------------------------
 *	Scan file list and select folders only
 ------------------------------------------------------------*/
word FEDLookForFoldersInList(void) {
word count, n;
FileOperationInfoEntry	*srcEntry, *destEntry;
SelectedFilesStruct	*fileInfo;

    fileInfo = MemLock(g_mh);

/*     
-----------------------------------------------------------
typedef struct {
    FileQuickTransferHeader	header;
    FileOperationInfoEntry	entry[];
    } SelectedFilesStruct;
-----------------------------------------------------------
typedef struct {
	word	    FQTH_nextBlock;	/* next transfer data block (0 if
					 * none) * /
	FQTHFlags   FQTH_UIFA;
	word	    FQTH_numFiles;  	/* Number of following
					 * FileOperationInfoEntry structs * /
	word	    FQTH_diskHandle;	/* Handle of disk on which FQTH_pathname
					 * sits * /
	PathName    FQTH_pathname;  	/* pathname of files * /
} FileQuickTransferHeader;
-----------------------------------------------------------
typedef	struct {
	FileLongName		FOIE_name;
    	GeosFileType		FOIE_type;
	FileAttrs		FOIE_attrs;
	GeosFileHeaderFlags	FOIE_flags;
	DirPathInfo		FOIE_pathInfo;
	GeodeToken		FOIE_creator;
	word			FOIE_info;	/* This is a generic word of
						 * info -- in Workplace Shell,
						 * this word contains the
						 * WShellObjectType of
						 * the file.
						 * /

} FileOperationInfoEntry;
-----------------------------------------------------------
*/     
    srcEntry  = &(fileInfo->entry[0]);
    destEntry = srcEntry;
    count = 0;
    
    for ( n = 0; n < fileInfo->header.FQTH_numFiles; n++) {
    
    	if ( (srcEntry->FOIE_type == GFT_DIRECTORY) ||
    	     ( (srcEntry->FOIE_type == GFT_NOT_GEOS_FILE) && (srcEntry->FOIE_attrs & FA_SUBDIR) ) ) {
    	    /*
    	     *	It's a folder. Move it up and count it
    	     */
    	    *destEntry = *srcEntry;
    	    destEntry++;    	     
    	    count++;
    	}
    	srcEntry++;
    }
     
    fileInfo->header.FQTH_numFiles = count;	// only deal with the found folders
    MemUnlock(g_mh);
     
    return count;
 
 }
    

/*#############################################################
 *
 * 	FolderEdInteractionClass
 *
 *#############################################################*/
 
@classdecl FolderEdInteractionClass;

@extern method FolderEdInteractionClass, MSG_FED_QUERY_TOKEN_LIST;
@extern method FolderEdInteractionClass, MSG_FED_APPLY_TOKEN_LIST;
@extern method FolderEdInteractionClass, MSG_FED_APPLY_TOKEN_RANGE;
@extern method FolderEdInteractionClass, MSG_FED_APPLY_TOKEN_TYPE;

/*-------------------------------------------------------------
 * void MSG_FED_QUIT_DIALOG(int cmd);	
 *-------------------------------------------------------------
 *	Close and destroy dialog box
 *
 *
-------------------------------------------------------------*/
// stop in foldered::FolderEdInteractionFED_QUIT_DIALOG
@method FolderEdInteractionClass, MSG_FED_QUIT_DIALOG {

    UserDestroyDialog(g_dialog); // close and destroy the dialog
    if (g_mh) MemFree(g_mh);
    if (g_tokenList) MemFree(g_tokenList);
    
    /* Important: set handles to zero for next call to the tool */
    g_mh = 0;
    g_tokenList = 0;
}


/*-------------------------------------------------------------
 * MSG_FED_QUERY_FOLDER	
 *-------------------------------------------------------------
 *	void GEN_DYNAMIC_LIST_QUERY_MSG (optr list, word item);
 *	Update item moniker in the folder list
-------------------------------------------------------------*/
// stop in foldered::FolderEdInteractionFED_QUERY_FOLDER
@method FolderEdInteractionClass, MSG_FED_QUERY_FOLDER {
FileLongName		fName;
SelectedFilesStruct	*fileInfo;

    if (!g_mh) strcpy(fName, "---");
    else {
	fileInfo = MemLock(g_mh);
	strcpy(fName, fileInfo->entry[item].FOIE_name);
	MemUnlock(g_mh);	
    }
    @send list::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_TEXT(item, fName);
}


/*-------------------------------------------------------------
 * MSG_FED_APPLY_FOLDER	
 *-------------------------------------------------------------
 *	GEN_ITEM_GROUP_APPLY_MSG ( word selection = cx,
 * 			    	    word numSelections = bp,
 *				    GenItemGroupStateFlags stateFlags = dl);
 *	
-------------------------------------------------------------*/
// stop in foldered::FolderEdInteractionFED_APPLY_FOLDER
@method FolderEdInteractionClass, MSG_FED_APPLY_FOLDER {
GeosFileType 		fileType;
FileAttrs		attrs;
FileLongName		fileName;
SelectedFilesStruct	*fileInfo;
GeodeToken		tok;
int			sel;


    fileInfo = MemLock(g_mh);
    strcpy(fileName, fileInfo->entry[selection].FOIE_name);
    tok = FEDShowFolderToken(fileName,	
    			fileInfo->header.FQTH_diskHandle,
    			fileInfo->header.FQTH_pathname);
    				
    fileType = fileInfo->entry[selection].FOIE_type;
    attrs = fileInfo->entry[selection].FOIE_attrs;
    MemUnlock(g_mh);
    
    /* Redraw TokenGroup to remove possible artefacts */
    @call @DialogObj(@FEDTopGroup)::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_UI_QUEUE);
    @send @DialogObj(@FEDTopGroup)::MSG_GEN_SET_USABLE(VUM_NOW);

    /* If currently no token selected, show currently used token in Tokenlist 
     * This only happens at startup, but not when teh user selects another folder */
    sel = @call @DialogObj(@FEDTokenList)::MSG_GEN_ITEM_GROUP_GET_SELECTION();    
    if (sel==GIGS_NONE) FEDSelectToken(tok, TRUE);

}

/*-------------------------------------------------------------
 * MSG_FED_CHANGE_TOKEN	
 *-------------------------------------------------------------
 *	void (void);
 *	apply new token
-------------------------------------------------------------*/
// stop in foldered::FolderEdInteractionFED_CHANGE_TOKEN
@method FolderEdInteractionClass, MSG_FED_CHANGE_TOKEN {
GeosFileType 		fileType;
FileAttrs		fileAttrs;
FileLongName		fileName;
SelectedFilesStruct	*fileInfo;
word		 	selection;

    FilePushDir();

	/*
	 * Enter path, load folderName and check if folder exists
	 */
    selection = @call @DialogObj(@SelectFolderList)::MSG_GEN_ITEM_GROUP_GET_SELECTION();	 
    fileInfo = MemLock(g_mh);
    FileSetCurrentPath(	fileInfo->header.FQTH_diskHandle,
			fileInfo->header.FQTH_pathname);
    strcpy(fileName, fileInfo->entry[selection].FOIE_name);
    MemUnlock(g_mh);
    
    fileAttrs = FileGetAttributes(fileName);
    if ( ThreadGetError() ) {
    	// folder not found
    	ErrorBoxOptr(@ErrorFileNotFound);
    	FilePopDir();
    	return;
    }

	/*
	 * Depending on fileType, set new token
	 */
    FileGetPathExtAttributes (fileName, FEA_FILE_TYPE, &fileType, sizeof(GeosFileType));

    switch (fileType) {
	case GFT_DIRECTORY:
	    FileSetPathExtAttributes (fileName, FEA_TOKEN, &g_selectedToken, sizeof(GeodeToken));
	    break;
  	case GFT_NOT_GEOS_FILE:
  	    if ( fileAttrs & FA_SUBDIR ) {
	    	FEDChangeDosFolderToken(fileName);
	    break;
  	    }
	default: 
	    // IMHO this should never happen
	    ErrorBoxOptr(@ErrorChangeToken); 	    
    }	   
    
    if ( ThreadGetError() )  { 
    	ErrorBoxOptr(@ErrorChangeToken); 
    }
    else { 
	MessageBoxOptr(@ChangeTokenOK); 
	@send @DialogObj(@SelectFolderList)::MSG_GEN_ITEM_GROUP_SET_MODIFIED_STATE(TRUE);
	@send @DialogObj(@SelectFolderList)::MSG_GEN_APPLY();
    } 

    
    FilePopDir();
    
}


/*-------------------------------------------------------------
 * FEDChangeDosFolderToken
 *-------------------------------------------------------------
 *	Change the token for a folder without a dirname file
-------------------------------------------------------------*/
void FEDChangeDosFolderToken(char *fileName) {
FileHandle fh;
ProtocolNumber proto;
GeosFileType type;

    FilePushDir();
    do {
    	FileSetCurrentPath(0, fileName);
    	if (ThreadGetError() ) break;
    	
	    /*
	     * Create and set up a dirname file
	     */
	fh = FileCreate("@dirname.000",FILE_CREATE_TRUNCATE |
			FILE_ACCESS_RW | FILE_DENY_RW,
			0);
	if ( fh == 0 ) break;
	
	proto.PN_major = 1; proto.PN_minor = 0;
	type = GFT_DIRECTORY;
	
	FileSetHandleExtAttributes(fh,FEA_PROTOCOL, &proto,sizeof(ProtocolNumber));
	FileSetHandleExtAttributes(fh,FEA_FILE_TYPE, &type,sizeof(GeosFileType));
	FileSetHandleExtAttributes(fh,FEA_NAME, fileName,FILE_LONGNAME_BUFFER_SIZE);
	FileSetHandleExtAttributes(fh,FEA_TOKEN, &g_selectedToken, sizeof(GeodeToken));
    
    	FileClose(fh, FALSE);
    
    } while(FALSE);
    FilePopDir();
}

/*-------------------------------------------------------------
 * FEDSelectToken
 *-------------------------------------------------------------
 *	Select given Token in the tokenlist
 *	selectFirst = TRUE: Select first list entry if token was not found 
 * 			or is not displayed yet
 *		      FALSE: Don't change selection in this case
 *-------------------------------------------------------------*/
void FEDSelectToken(GeodeToken tok, Boolean selectFirst) {
TokenListStruct	*tokenList;
int 	n, manufID, idx;
Boolean found;

		
    tokenList = MemLock(g_tokenList);
    found  = FALSE;
    idx = 0;
    manufID = tok.GT_manufID;
    for ( n = 0; n < tokenList->tokenCount; n++ ) {
    
    	if (manufID != tokenList->token[n].GT_manufID) continue;
    	
    	if ( memcmp(&tok, &(tokenList->token[n]), sizeof(GeodeToken)) == 0 ) {
    	    /*
    	     * token found. See if currently displayed
    	     * set found = TRUE and asign idx for this case
    	     * leave idx = 0 and found = FALSE otherwise
    	     */
    	    if ( n < tokenList->firstIndex) break;
    	    if ( n >= (tokenList->firstIndex + tokenList->tokensToShow)) break;
    	    found = TRUE;
    	    idx = n - tokenList->firstIndex;
    	    break;
    	}
    }
    MemUnlock(g_tokenList);
    
    /*
     * Select proper list entry
     */
    if ( found || selectFirst) {
	@send @DialogObj(@FEDTokenList)::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(idx, FALSE);
	@send @DialogObj(@FEDTokenList)::MSG_GEN_ITEM_GROUP_SET_MODIFIED_STATE(TRUE);
	@send @DialogObj(@FEDTokenList)::MSG_GEN_APPLY();
    }
    

}

/*-------------------------------------------------------------
 * MSG_FED_CLEAR_TOKEN	
 *-------------------------------------------------------------
 *	void (void);
 *	Set all tokenchars and manufID to zero for this folder
 *	This will force the file manager to use the default folder token
-------------------------------------------------------------*/
// stop in foldered::FolderEdInteractionFED_CLEAR_TOKEN
@method FolderEdInteractionClass, MSG_FED_CLEAR_TOKEN {
GeodeToken 	savedToken;
int cmd;

    cmd = QuestionBoxOptr(@QuestionClearToken);
    if ( cmd != IC_YES) return;
    /* 
     * simply set selected token to zero and call the set-new-token handler
     */
    savedToken = g_selectedToken;
    memset(&g_selectedToken, 0, sizeof(GeodeToken) );
    @call oself::MSG_FED_CHANGE_TOKEN(); 
    g_selectedToken = savedToken;
    

}
