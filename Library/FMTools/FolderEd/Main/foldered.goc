/**************************************************************************
 *	Project: IconEdit file manager tool
 *
 *	File:	foldered.goc
 *
 *		
 *
 *	By RABE-Soft, Rainer Bettsteller, for Free PC/GEOS Project
 *
 **************************************************************************/

@include <stdapp.goh>
@include <fmtool.goh>
#include <Ansi/string.h>
#include <Ansi/stdio.h>
#include <token.h>

@include "foldered.goh"
@include "UI/fedui.goh"

@include "Oldlibs/rstoked.goh"

static	optr		g_dialog = NullOptr;
static	MemHandle 	g_mh;
static	GeodeToken	g_selectedToken;
static 	MemHandle 	g_tokenList = 0;	/* List of all Tokens in the TokenDB */
static 	word		g_displaySize = DEFAULT_TOKEN_DISPLAY_SIZE;
static 	word		g_tokenStyle = DEFAULT_TOKEN_STYLE;

/*
	
	To do
	
	* Wenn DOS-Filese Edit nicht geht: ganz raus
		! Aktuell einfach ignorieren
	
	- Folder ohen Dirname: Dirname anlegen und dann ‰ndern
	
	- Token und Creator TRT implementieren, NotFoundMoniker
		--> AnzeigeRoutine fileType ¸bergeben oder -1 (DONT_REPLACE_NOT_FOUND)
		!! aktuell: fileType passed
		--> durchdenken, klappt nicht bei Creator-Token
			?? doch TRT_ ??
			
		
	-File tokenshow.goc mit	- Token Moniker als VisMoniker, Parameter DisplaySize und ob Tool oder icon
					evtl Bittiefe (? nur wenn hier verwendet)
					(Kombination not found durchdenken)
	++ check:
		Desk,0 hat keinen SuperVGA moniker laut IocnEditor
		--> was wird importiert? Memhandle = 0 in InternalGetTokenMonikerBlock??
		dito PREF,0 PMGR, 0
		--> Liste muss dann auf Standrad umswitchen!
		
	++ InternalGetTokenMonikerBlock(tok, g_displaySize, g_tokenStyle, &sizeRead, &isGString);
		--> isGstring schein ¸berfl¸ssig?
*/



/*-------------------------------------------------------------
 *	API Struct	- tell the file manager infos about our tools
 *	MUST be global
-------------------------------------------------------------*/
FMToolStruct FMToolInfo[1] = {
    {
        @FolderEditMoniker, (FMTF_SELECTED_ONLY | FMTT_DIALOG), 1
        	/* Moniker for Tool Entry
        	 * FMTF_SELECTED_ONLY: active, onyl if a file/folder is selected
        	 * FMTT_DIALOG: a dialog will come up (see FMToolType). 
        	 * 1: number of the tool in our list (we have only one)
        	 */
    }
};

/*-------------------------------------------------------------
 *	FMFetchToolsProc GetThoseTools
 *	FileManager API Function - fetch Tools
-------------------------------------------------------------*/

word _pascal _export GetThoseTools(FMToolStruct **tablePtr)
{
    *tablePtr = (FMToolStruct*) &FMToolInfo;
    return 1;
}


/*-------------------------------------------------------------
 *	FMToolProc FolderEdToolStart()
 *-------------------------------------------------------------
 *	GeodeHandle filemgr => Process that is subclass of FileManagerClass
 *	word toolNum =>	Entry # of activated tool within table returned by
 *                FMTF_FETCH_TOOLS
 *	word entryNum
 *
 *	The user has clicked on our Utilities menu item: "Edit Icon"
-------------------------------------------------------------*/
// stop in foldered::FolderEdToolStart
void _pascal _export FolderEdToolStart(
    GeodeHandle filemgr,
    word toolNum,
    word entryNum
)
{
SelectedFilesStruct	*fileInfo;
word	count;

{word x = toolNum; x= entryNum; x=x; }	// supress compiler warning

    /*
     * Copy our dialog template and add it to the application object
     */
    g_dialog = UserCreateDialog(@SelectDialog);
    	
    /*
     * Initialize duplicated dialog objects
     */
    @send @DialogObj(@SelectOkTrigger)::MSG_GEN_TRIGGER_SET_DESTINATION(g_dialog);
    @send @DialogObj(@SelectCancelTrigger)::MSG_GEN_TRIGGER_SET_DESTINATION(g_dialog);
    @send @DialogObj(@SelectFileList)::MSG_GEN_ITEM_GROUP_SET_DESTINATION(g_dialog);
    @send @DialogObj(@FEDTokenList)::MSG_GEN_ITEM_GROUP_SET_DESTINATION(g_dialog);
    @send @DialogObj(@FEDManufIDApplayTrigger)::MSG_GEN_TRIGGER_SET_DESTINATION(g_dialog);
    @send @DialogObj(@FEDDisplaySizeSelector)::MSG_GEN_ITEM_GROUP_SET_DESTINATION(g_dialog);
    @send @DialogObj(@FEDTokenStyleSelector)::MSG_GEN_ITEM_GROUP_SET_DESTINATION(g_dialog);
    

    /*
     * Figure out the selected files and initialize the files list
     */
    g_mh = @call ConstructOptr(filemgr, 0)::MSG_FM_GET_SELECTED_FILES();
    if ( !g_mh ) return;	// be save to avoid crash, should not occur.
    
    fileInfo = MemLock(g_mh);
    @send @DialogObj(@SelectFileList)::MSG_GEN_DYNAMIC_LIST_INITIALIZE(fileInfo->header.FQTH_numFiles);
    @send @DialogObj(@SelectFileList)::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(0, FALSE);
    @send @DialogObj(@SelectFileList)::MSG_GEN_ITEM_GROUP_SET_MODIFIED_STATE(TRUE);
    @send @DialogObj(@SelectFileList)::MSG_GEN_APPLY();
    MemUnlock(g_mh);

    /*
     * Create list of tokens and initialize the FEDTokenList
     */
    count = FEDListTokens();
    @send @DialogObj(@FEDTokenList)::MSG_GEN_DYNAMIC_LIST_INITIALIZE(count);
    @send @DialogObj(@FEDTokenList)::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(0, FALSE);
    @send @DialogObj(@FEDTokenList)::MSG_GEN_ITEM_GROUP_SET_MODIFIED_STATE(TRUE);
    @send @DialogObj(@FEDTokenList)::MSG_GEN_APPLY();
    
    @send  @DialogObj(@FEDIconInfoCount)::MSG_GEN_VALUE_SET_INTEGER_VALUE(count, FALSE);
    @send  @DialogObj(@FEDIconInfoDisplayed)::MSG_GEN_VALUE_SET_INTEGER_VALUE(count, FALSE);

    /*
     * Finally, open dialog box
     */
    @send g_dialog::MSG_GEN_INTERACTION_INITIATE();

}

/*-------------------------------------------------------------
 *	FEDShowToken
 *-------------------------------------------------------------
 *	Display Icon Moniker and ID
 -------------------------------------------------------------*/
// swat stop in foldered::FEDShowToken
void  FEDShowToken(GeodeToken tok, optr idObj, optr monikerObj, GeosFileType fileType) {
#define NUM_CHARS_IN_ID	10
char buf[NUM_CHARS_IN_ID + 2];


    FEDTokenIdToText(tok,NUM_CHARS_IN_ID, buf);
    @call idObj::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(buf, 0);
    
    FEDShowTokenMoniker(tok, monikerObj, fileType);

}

/*-------------------------------------------------------------
 *	FEDShowFileTokens
 *-------------------------------------------------------------
 *	Read and Display Icon and Creator Token for a file
 *	Return: GeosFileType
 -------------------------------------------------------------*/
void FEDShowFileTokens(char *fileName,	DiskHandle dh, char *path) {
optr idObj, monikerObj;
word fileAttrs;
GeodeToken fileToken, creatorToken;
GeosFileType fileType;
FileExtAttrDesc	attrDesc[4];	/* Array 0..3 */

  FilePushDir();
  FileSetCurrentPath(dh,path);


  /* Read extended attributes */
  @SetAttrDesc(attrDesc[0],FEA_TOKEN,&fileToken,sizeof(GeodeToken));
  @SetAttrDesc(attrDesc[1],FEA_CREATOR,&creatorToken,sizeof(GeodeToken));
  @SetAttrDesc(attrDesc[2],FEA_FILE_TYPE,&fileType,sizeof(GeosFileType));
  @SetAttrDesc(attrDesc[3],FEA_FILE_ATTR,&fileAttrs,1);
  FileGetPathExtAttributes(fileName,FEA_MULTIPLE,attrDesc,4);

@if 0
µµ
/* Replace-Typen fÅr Tokenazeige setzen */
  switch ( fileType ) {
  case GFT_NOT_GEOS_FILE:       if ( fileAttrs & FA_SUBDIR )
					*tokenReplaceType = TRT_SUBDIR;
				   else *tokenReplaceType = TRT_DOSFILE;
				*creatorReplaceType = TRT_DOSEXEC;
				break;
  case GFT_EXECUTABLE:          *tokenReplaceType = TRT_NO;
				*creatorReplaceType = TRT_GEOSEXEC;
				break;
  case GFT_DIRECTORY:		*tokenReplaceType = TRT_SUBDIR;
				*creatorReplaceType = TRT_GEOSEXEC;
				break;
  default:                      /* GFT_VM | GFT_DATA | GFT_LINK */
				*tokenReplaceType = TRT_NO;
				*creatorReplaceType = TRT_GEOSEXEC;
				break;
				}

/* Wenn DOS-File: Leertoken setzen */
  if (fileType == GFT_NOT_GEOS_FILE) {
	  TokShowFindDosTokens(fileName,fileAttrs,token,creator);
	  }
@endif

  idObj = @DialogObj(@TokenTokenID);
  monikerObj = @DialogObj(@TokenTokenDisplay);
  FEDShowToken(fileToken, idObj, monikerObj, fileType);
  
  idObj = @DialogObj(@TokenCreatorID);
  monikerObj = @DialogObj(@TokenCreatorDisplay);
  FEDShowToken(creatorToken, idObj, monikerObj, fileType);
  

  FilePopDir();
  
  return;
  }



/*-------------------------------------------------------------
 *	FEDUpdateEditUI
 *-------------------------------------------------------------
 *	Update UI, depending on fileType
 
 	µµ Aktuell DOS Edit Token UND Creator
 -------------------------------------------------------------*/
void FEDUpdateEditUI(GeosFileType fileType, FileAttrs attrs) {
Boolean	enableTokenEdit = FALSE;
optr textObj, txtOp, noChangeTxtOp;

	/* 
	 * Enable / Disable "Change Token" trigger
	 */
    switch (fileType) {
  	case GFT_NOT_GEOS_FILE:
	case GFT_DIRECTORY:		// enable edititable token
	    enableTokenEdit = TRUE;
	    break;
	case GFT_LINK:			// Only allow edit for links to folders
	    if (attrs & FA_SUBDIR) enableTokenEdit = TRUE;
	    break;
	case GFT_VM:
	case GFT_DATA:
	case GFT_EXECUTABLE:		// Never change the token
	default: 
		break;
    }	   

    if (enableTokenEdit) {
	@send @DialogObj(@SelectOkTriggerHolder)::MSG_GEN_SET_ENABLED(VUM_NOW);
	}
    else {
	@send @DialogObj(@SelectOkTriggerHolder)::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
	}

	
	/* 
	 * Display info texts
	 */
    switch (fileType) {
  	case GFT_NOT_GEOS_FILE:
	    txtOp = @TextNotGEOSFile;
	    noChangeTxtOp = @NoChangeNotGEOSFile;
	    break;
	case GFT_EXECUTABLE:
	    txtOp = @TextGEOSExecutable;
	    noChangeTxtOp = @NoChangeGEOSExecutable;
	    break;
	case GFT_DIRECTORY:
	    txtOp = @TextFolder;
	    noChangeTxtOp = @NoChangeFolder;
	    break;
	case GFT_VM:
	    txtOp = @TextVMFile;
	    noChangeTxtOp = @NoChangeVMFile;
	    break;
	case GFT_DATA:
	    txtOp = @TextDataFile;
	    noChangeTxtOp = @NoChangeDataFile;
	    break;
	case GFT_LINK:
	    txtOp = @TextLink;
	    noChangeTxtOp = @NoChangeLink;
	    break;
	default: 				
	    txtOp = @TextUnknown;
	    noChangeTxtOp = @NoChangeUnknown;
    }	   
    
    textObj = @DialogObj(@FileTypeText);
    @call textObj::MSG_VIS_TEXT_REPLACE_ALL_OPTR(txtOp, 0);

    textObj = @DialogObj(@TokenEditInfoText);
    if (enableTokenEdit) {
	@call textObj::MSG_VIS_TEXT_REPLACE_ALL_PTR("", 0);
	}
    else {
	@call textObj::MSG_VIS_TEXT_REPLACE_ALL_OPTR(noChangeTxtOp, 0);
	}
    

}



/*#############################################################
 *
 * 	FolderEdInteractionClass
 *
 *#############################################################*/
 
@classdecl FolderEdInteractionClass;

@extern method FolderEdInteractionClass, MSG_FED_QUERY_TOKEN_LIST;
@extern method FolderEdInteractionClass, MSG_FED_APPLY_TOKEN_LIST;
@extern method FolderEdInteractionClass, MSG_FED_APPLY_TOKEN_RANGE;
@extern method FolderEdInteractionClass, MSG_FED_APPLY_TOKEN_TYPE;

/*-------------------------------------------------------------
 * void MSG_FED_QUIT_DIALOG(int cmd);	
 *-------------------------------------------------------------
 *	Perform tool operation, close and destroy dialog box
 *
 *
-------------------------------------------------------------*/
// stop in foldered::FolderEdInteractionFED_QUIT_DIALOG
@method FolderEdInteractionClass, MSG_FED_QUIT_DIALOG {

    UserDestroyDialog(g_dialog); // close and destroy the dialog
    if (g_mh) MemFree(g_mh);
    if (g_tokenList) MemFree(g_tokenList);
}


/*-------------------------------------------------------------
 * MSG_FED_QUERY_FILE	
 *-------------------------------------------------------------
 *	void GEN_DYNAMIC_LIST_QUERY_MSG (optr list, word item);
 *	Update item moniker in the file list
-------------------------------------------------------------*/
// stop in foldered::FolderEdInteractionFED_QUERY_FILE
@method FolderEdInteractionClass, MSG_FED_QUERY_FILE {
FileLongName		fName;
SelectedFilesStruct	*fileInfo;

    if (!g_mh) strcpy(fName, "---");
    else {
	fileInfo = MemLock(g_mh);
	strcpy(fName, fileInfo->entry[item].FOIE_name);
	MemUnlock(g_mh);	
    }
    @send list::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_TEXT(item, fName);
}


/*-------------------------------------------------------------
 * MSG_FED_APPLY_FILE	
 *-------------------------------------------------------------
 *	GEN_ITEM_GROUP_APPLY_MSG ( word selection = cx,
 * 			    	    word numSelections = bp,
 *				    GenItemGroupStateFlags stateFlags = dl);
 *	
-------------------------------------------------------------*/
// stop in foldered::FolderEdInteractionFED_APPLY_FILE
@method FolderEdInteractionClass, MSG_FED_APPLY_FILE {
GeosFileType 		fileType;
FileAttrs		attrs;
FileLongName		fileName;
SelectedFilesStruct	*fileInfo;


    fileInfo = MemLock(g_mh);
    strcpy(fileName, fileInfo->entry[selection].FOIE_name);
    FEDShowFileTokens(fileName,	
    			fileInfo->header.FQTH_diskHandle,
    			fileInfo->header.FQTH_pathname);
    				
    fileType = fileInfo->entry[selection].FOIE_type;
    attrs = fileInfo->entry[selection].FOIE_attrs;
    MemUnlock(g_mh);
    
    FEDUpdateEditUI(fileType, attrs);

    /* Redraw TokenGroup to remove possible artefacts */
    @call @DialogObj(@FEDTokenGroup)::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_UI_QUEUE);
    @send @DialogObj(@FEDTokenGroup)::MSG_GEN_SET_USABLE(VUM_NOW);

}

/*-------------------------------------------------------------
 * MSG_FED_CHANGE_TOKEN	
 *-------------------------------------------------------------
 *	void (void);
 *	apply new token
-------------------------------------------------------------*/
// stop in foldered::FolderEdInteractionFED_CHANGE_TOKEN
@method FolderEdInteractionClass, MSG_FED_CHANGE_TOKEN {
GeosFileType 		fileType;
FileLongName		fileName;
SelectedFilesStruct	*fileInfo;
word		 	selection;

    FilePushDir();

	/*
	 * Enter path, load fileName and check if file exists
	 */
    selection = @call @DialogObj(@SelectFileList)::MSG_GEN_ITEM_GROUP_GET_SELECTION();	 
    fileInfo = MemLock(g_mh);
    FileSetCurrentPath(	fileInfo->header.FQTH_diskHandle,
			fileInfo->header.FQTH_pathname);
    strcpy(fileName, fileInfo->entry[selection].FOIE_name);
    MemUnlock(g_mh);
    
    FileGetAttributes(fileName);
    if ( ThreadGetError() ) {
    	// file not found
    	ErrorBoxOptr(@ErrorFileNotFound);
    	FilePopDir();
    	return;
    }

	/*
	 * Depending on fileType, set new token
	 */
    FileGetPathExtAttributes (fileName, FEA_FILE_TYPE, &fileType, sizeof(GeosFileType));

    switch (fileType) {
  	case GFT_NOT_GEOS_FILE:
	    MessageBox("ChangeDosToken");
	    break;
	case GFT_EXECUTABLE:
	case GFT_DIRECTORY:
	case GFT_VM:
	case GFT_DATA:
	case GFT_LINK:
	default: 
	    FileSetPathExtAttributes (fileName, FEA_TOKEN, &g_selectedToken, sizeof(GeodeToken));
    }	   
    
    if ( ThreadGetError() )  { 
    	ErrorBoxOptr(@ErrorChangeToken); 
    }
    else { 
	MessageBoxOptr(@ChangeTokenOK); 
	@send @DialogObj(@SelectFileList)::MSG_GEN_ITEM_GROUP_SET_MODIFIED_STATE(TRUE);
	@send @DialogObj(@SelectFileList)::MSG_GEN_APPLY();
    } 

    
    FilePopDir();
    
}


