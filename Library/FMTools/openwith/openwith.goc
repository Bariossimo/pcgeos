@include <stdapp.goh>
@include <fmtool.goh>
#include <Ansi/string.h>
#include <Ansi/stdio.h>
@include <openwith.goh>

@start FMUI, data;
    @visMoniker Moniker1 = "Open With";
@end FMUI;


@start CAUI, notDetachable;
    @object GenInteractionClass SelectDialog = {
        GI_visMoniker = "Open With";
        GI_comp =
                    @OpenWithFileSelector,
                    @SelectReplyBar;
        GI_states = (@default & (~GS_USABLE));
        GII_visibility = GIV_DIALOG;
        GII_attrs = @default | GIA_INITIATED_VIA_USER_DO_DIALOG | GIA_MODAL;
        HINT_PLACE_MONIKER_ABOVE;
        HINT_ORIENT_CHILDREN_VERTICALLY;
    }

    @object GenFileSelectorClass OpenWithFileSelector =
    {
        //GFSI_destination = process;
        //GFSI_notificationMsg = MSG_FILEBROW_SELECTOR_ACTION;
        GFSI_attrs =           ((FSA_ALLOW_CHANGE_DIRS) & (~FSA_SHOW_FILES_DISABLED) & (~FSA_HAS_OPEN_DIR_BUTTON) & (~FSA_HAS_CHANGE_DIRECTORY_LIST))
                                | ((FSA_HAS_FILE_LIST) & (~FSA_SHOW_FIXED_DISKS_ONLY) & (~FSA_HAS_CLOSE_DIR_BUTTON) & (~FSA_HAS_DOCUMENT_BUTTON)& (~FSA_HAS_CHANGE_DRIVE_LIST))
                                | ((FSA_USE_VIRTUAL_ROOT));

        GFSI_fileCriteria =      ((FSFC_DIRS) & (~FSFC_NON_GEOS_FILES))
                                | ((FSFC_GEOS_EXECUTABLES) & (~FSFC_GEOS_NON_EXECUTABLES));

        ATTR_GEN_FILE_SELECTOR_VIRTUAL_ROOT = {SP_APPLICATION, ""};
        ATTR_GEN_PATH_DATA = {SP_APPLICATION, ""};
        HINT_FILE_SELECTOR_FILE_LIST_WIDTH = 40;
        HINT_FILE_SELECTOR_NUMBER_OF_FILES_TO_SHOW = 20;
    }

    @object GenInteractionClass SelectReplyBar =
    {
        GI_comp =	@SelectOkTrigger,
                    @SelectCancelTrigger;
        HINT_MAKE_REPLY_BAR;
    }

    @object GenTriggerClass SelectOkTrigger =
    {
        ATTR_GEN_TRIGGER_INTERACTION_COMMAND = { IC_OK };
        HINT_SEEK_REPLY_BAR;
        HINT_DEFAULT_DEFAULT_ACTION;
    }

    @object GenTriggerClass SelectCancelTrigger =
    {
        ATTR_GEN_TRIGGER_INTERACTION_COMMAND = { IC_DISMISS };
        HINT_SEEK_REPLY_BAR;
    }

@end CAUI;


/*-------------------------------------------------------------
API Struct
MUST be global
-------------------------------------------------------------*/
FMToolStruct FMToolInfo[1] = {
    {
        @Moniker1, (FMTF_SELECTED_ONLY | FMTT_DIALOG), 1
    }
};

/*-------------------------------------------------------------
FileManager API Function - fetch Tools
-------------------------------------------------------------*/
//FMFetchToolsProc GetThoseTools
word _pascal _export GetThoseTools(FMToolStruct **tablePtr)
{
    *tablePtr = (FMToolStruct*) &FMToolInfo;
    return 1;
}

/*-------------------------------------------------------------
The user has clicked on our Utilities menu item: "Open With"
GeodeHandle filemgr => Process that is subclass of FileManagerClass
word toolNum =>	Entry # of activated tool within table returned by
                FMTF_FETCH_TOOLS
word entryNum
-------------------------------------------------------------*/
//FMToolProc OpenWithEntryPoint()
void _pascal _export OpenWithEntryPoint(
    GeodeHandle filemgr,
    word toolNum,
    word entryNum
)
{
    MemHandle                   selFiles;
    MemHandle                   oldBlock;
    FileQuickTransferHeader*    headerPtr;
    FileOperationInfoEntry*     entriesPtr;
    word                        i;
    InteractionCommand          reply = IC_NULL;

    optr                        dialog = NullOptr;
    optr                        fSelect = NullOptr;
    dword	    	            flagsAndDisk;	/* entry flags + disk handle returned by file selector */
    PathName    	            pathname;   	/* Buffer for fetching the complete path of the application */
    DiskHandle  	            disk;	    	/* Disk on which it resides */
    GeodeToken  	            token;	    	/* Token for the application, so we can connect to it */


    dialog = @call ConstructOptr(filemgr, 0)::MSG_FM_DUP_AND_ADD(@SelectDialog, FMP_APPLICATION);
    @call dialog::MSG_GEN_SET_USABLE(VUM_NOW);

    reply = UserDoDialog(dialog);
    if (reply == IC_OK)
    {
        fSelect = @call dialog::MSG_GEN_FIND_CHILD_AT_POSITION(0);
        flagsAndDisk = @call fSelect::MSG_GEN_FILE_SELECTOR_GET_FULL_SELECTION_PATH(pathname);

        UserDestroyDialog(dialog); // no more needed

        if (GFS_GET_ENTRY_TYPE(flagsAndDisk) == GFSET_FILE)
        {
            disk = GFS_GET_FULL_SELECTION_PATH_DISK_HANDLE(flagsAndDisk); // Extract disk handle

            FilePushDir();
            if (
                 (FileSetCurrentPath(disk, _TEXT("\\")) != 0) &&
                 (FileGetPathExtAttributes(pathname, FEA_TOKEN, &token, sizeof(token)) == 0)
               )
            {
                selFiles = @call ConstructOptr(filemgr, 0)::MSG_FM_GET_SELECTED_FILES();

                while (selFiles != 0)
                {
                    headerPtr  = (FileQuickTransferHeader*) MemLock(selFiles); // get pointer to it header
                    entriesPtr = (FileOperationInfoEntry*) (headerPtr + 1); // get pointer to first entry (follows header)

                    for (i=0; i < headerPtr->FQTH_numFiles; i++)
                    {
                        if (entriesPtr->FOIE_type == GFT_NOT_GEOS_FILE)
                        {
                            LaunchApp(
                                &token,
                                disk,
                                &pathname,
                                headerPtr->FQTH_diskHandle,
                                headerPtr->FQTH_pathname,
                                entriesPtr->FOIE_name
                            );
                        }

                        // point to the next entry
                        entriesPtr = (FileOperationInfoEntry*) entriesPtr + 1;
                    }

                    // get next block, if any
                    MemUnlock(selFiles);
                    oldBlock = selFiles;
                    selFiles = headerPtr->FQTH_nextBlock; // returns 0 if end, which breaks the loop
                    MemFree(oldBlock);
                }
            }
            FilePopDir();
        }
    }
}


/***********************************************************************
lauch application with DOS file via IACP...
***********************************************************************/
void LaunchApp(
    GeodeToken *appTok,
    DiskHandle appDisk,
    PathName *appPath,
    DiskHandle dataDisk,
    PathName *dataPath,
    FileLongName *dataFName)
{
    IACPConnection       iacpConnectionToken = IACP_NO_CONNECTION;
    word                 connectionFlags   = IACPSM_USER_INTERACTIBLE | IACPCF_FIRST_ONLY;
    word                 serverCount;
    MemHandle            albBlock;
    AppLaunchBlock       *albPtr;

    albBlock = IACPCreateDefaultLaunchBlock(MSG_GEN_PROCESS_OPEN_APPLICATION);

    albPtr = MemLock(albBlock);
    strcpy(albPtr->ALB_appRef.AIR_fileName, appPath);
    albPtr->ALB_appRef.AIR_diskHandle = appDisk;
    albPtr->ALB_diskHandle = dataDisk;
    strcpy(albPtr->ALB_path, dataPath);
    strcpy(albPtr->ALB_dataFile, dataFName);
    MemUnlock(albBlock);

    iacpConnectionToken = IACPConnect(appTok, connectionFlags, albBlock, NullOptr, &serverCount);
    if(iacpConnectionToken != IACP_NO_CONNECTION)
    {
        IACPShutdown(iacpConnectionToken, NullOptr);
    }
}