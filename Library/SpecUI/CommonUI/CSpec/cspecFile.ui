/*
 *
 * Project:	PC GEOS
 * Module:	OpenLook
 * File:	cspecFile.ui
 *
 * Author:	Tony
 *
 *	This file contains the user Interface description for file
 *	dialog box stuff
 *
 *	$Id: cspecFile.ui,v 1.2 98/03/11 05:58:17 joon Exp $
 *
 */

/* -------------------------------------------------------------------------
 *		Local compile-time variables
 *
 * _MINIMAL_STANDARD_DIALOGS makes the standard dialogs have no title bar
 *   and no "Cute Glyphs".  This variable has an analog for asm in
 *   cConstant.def.
 * -------------------------------------------------------------------------
 */
#if      _STYLUS
#  define _MINIMAL_STANDARD_DIALOGS -1
#else
#  define _MINIMAL_STANDARD_DIALOGS  0
#endif /* _STYLUS */

/* -------------------------------------------------------------------------
 *		Standard dialog box stuff
 * -------------------------------------------------------------------------
 */
 
/*
 * Leave this block with only StandardDialog stuff as it is duplicated for
 * each standard dialog put up
 */

start StandardDialogUI, notDetachable;

StandardDialogSummons = GenInteraction {
	genStates = default -usable;
	attributes = default +notUserInitiatable, +initiatedViaUserDoDialog,
			+modal;
	children = StdDialogTopGroup;
	/* type is set dynamically */
	visibility = dialog;
	hints = {
#if       _MINIMAL_STANDARD_DIALOGS
		    HINT_WINDOW_NO_TITLE_BAR,
#endif /* _MINIMAL_STANDARD_DIALOGS */
        }
}

StdDialogTopGroup = GenInteraction {
	children = 
#if       ! _MINIMAL_STANDARD_DIALOGS
		   StdDialogCuteGlyph,
#endif /* ! _MINIMAL_STANDARD_DIALOGS */
		   StdDialogTextDisplay;
	hints = {
#if       _MINIMAL_STANDARD_DIALOGS
		HINT_CUSTOM_CHILD_SPACING {
			SpecSizeSpec <SST_AVG_CHAR_WIDTHS, 2>
		},
		HINT_FULL_JUSTIFY_CHILDREN_HORIZONTALLY,
		HINT_FULL_JUSTIFY_CHILDREN_VERTICALLY,
		HINT_INCLUDE_ENDS_IN_CHILD_SPACING,
#endif /* _MINIMAL_STANDARD_DIALOGS */

		HINT_EXPAND_HEIGHT_TO_FIT_PARENT,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_ORIENT_CHILDREN_HORIZONTALLY
	}
}

/*
 * Don't need glyph or visMonikers if _MINIMAL_STANDARD_DIALOGS is true.
 */
#if       ! _MINIMAL_STANDARD_DIALOGS

StdDialogCuteGlyph = GenGlyph {
}

/*
 *	WARNING! LEAVE THESE MONIKERS IN THIS ORDER (SC,SM,SCGA) BECAUSE
 *	WE HAVE TO UNRELOCATE THEM BY HAND
 *		(SEE OLApplicationBuildStandardDialog)
 */

visMoniker StdDialogQuestionMoniker = list {
#if INCLUDE_SC_MONIKERS
	StdDialogQuestionSCMoniker,
#endif
#if INCLUDE_SM_MONIKERS
	StdDialogQuestionSMMoniker,
#endif
#if INCLUDE_CGA_MONIKERS
	StdDialogQuestionSCGAMoniker,
#endif
#if INCLUDE_YM_MONIKERS
	StdDialogQuestionYMMoniker
#endif
}

visMoniker StdDialogWarningMoniker = list {
#if INCLUDE_SC_MONIKERS
	StdDialogWarningSCMoniker,
#endif
#if INCLUDE_SM_MONIKERS
	StdDialogWarningSMMoniker,
#endif
#if INCLUDE_CGA_MONIKERS
	StdDialogWarningSCGAMoniker,
#endif
#if INCLUDE_YM_MONIKERS
	StdDialogWarningYMMoniker
#endif
}

visMoniker StdDialogNotificationMoniker = list {
#if INCLUDE_SC_MONIKERS
	StdDialogNotificationSCMoniker,
#endif
#if INCLUDE_SM_MONIKERS
	StdDialogNotificationSMMoniker,
#endif
#if INCLUDE_CGA_MONIKERS
	StdDialogNotificationSCGAMoniker,
#endif
#if INCLUDE_YM_MONIKERS
	StdDialogNotificationYMMoniker
#endif
}

visMoniker StdDialogErrorMoniker = list {
#if INCLUDE_SC_MONIKERS
	StdDialogErrorSCMoniker,
#endif
#if INCLUDE_SM_MONIKERS
	StdDialogErrorSMMoniker,
#endif
#if INCLUDE_CGA_MONIKERS
	StdDialogErrorSCGAMoniker,
#endif
#if INCLUDE_YM_MONIKERS
	StdDialogErrorYMMoniker
#endif
}

#endif /* ! _MINIMAL_STANDARD_DIALOGS */


chunk StdDialogText = "";

StdDialogTextDisplay = GenText {
	genAttributes = readOnly;
	text = StdDialogText;
	textDisplayAttributes =
		useTabForNavigation;
	hints = {
		  HINT_EXPAND_HEIGHT_TO_FIT_PARENT,
		  HINT_MAXIMUM_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 50>
			SpecHeight <>
		  }
	}

}

end StandardDialogUI;

/***/

start StringsUI, data;

chunk RangeUnitStrings =
	"pt"	/* points */
	"in"	/* inches */
	"cm"	/* centimeters */
	"mm"	/* millimeters */
	"pi"	/* picas */
	"ep"	/* european points */
	"ci";	/* ciceros */

/*
chunk DiskNotFoundString =
	"The disk \\\"\\1\\\" could not be found.  Please insert it in"
	" drive \\\"\\2\\\" and click OK to continue, or click Cancel"
	" to exit.";
*/
/* NO PARAMS YET */

#if !SINGLE_DRIVE_DOCUMENT_DIR
chunk DiskNotFoundString =
	"The disk could not be found.  Please insert it in the"
	" drive and try again.";
#else
chunk DiskNotFoundString =
	"A disk could not be found.  Please insert one in the"
	" drive and try again.";

visMoniker DiskNotFound_OK = "OK";
visMoniker DiskNotFound_Cancel = "VMO_CANCEL", "Esc - Cancel";
#endif



/* moniker for Change Drive button in File Selectors */

#if FSEL_HAS_CHANGE_DRIVE_POPUP
visMoniker ChangeDriveMoniker = 'v', "Drives";
#endif

#if _ISUI
chunk ClockControlHelpString = "Left click for date, double-click to change";
chunk MinimizeHelpString = "Minimize window";
chunk MaximizeHelpString = "Maximize window";
chunk RestoreHelpString = "Restore window";
chunk CloseHelpString = "Close current window or program";
chunk HelpHelpString = "Show help for this window";
chunk MenuHelpString = "Menu of window commands";
#endif

end StringsUI;


/*
 *	Art for the glyph in the standard DB
 */

/*
 * Don't need most artwork if _MINIMAL_STANDARD_DIALOGS is true.
 * CMain/cmainLowDisk.ui uses StdDialogErrorSCMoniker, so leave it included.
 */

#if _ISUI

#if       ! _MINIMAL_STANDARD_DIALOGS

#include "./../ISUI/Art/mkrStdDialogQuestion.ui"
#include "./../ISUI/Art/mkrStdDialogWarning.ui"
#include "./../ISUI/Art/mkrStdDialogNotification.ui"

#endif /* ! _MINIMAL_STANDARD_DIALOGS */

#include "./../ISUI/Art/mkrStdDialogError.ui"

#else  /* else if _ISUI */

#if       ! _MINIMAL_STANDARD_DIALOGS

#include "./../CommonUI/CArt/mkrStdDialogQuestion.ui"
#include "./../CommonUI/CArt/mkrStdDialogWarning.ui"
#include "./../CommonUI/CArt/mkrStdDialogNotification.ui"

#endif /* ! _MINIMAL_STANDARD_DIALOGS */

#include "./../CommonUI/CArt/mkrStdDialogError.ui"

#endif	/* end if _ISUI */


/*-----------------------------------------------------------------------------
	File Selector objects
-----------------------------------------------------------------------------*/

	/*
	 * This object block is duplicated when an OLFileSelector is vis built.
	 * It must be notDetachable so the thing doesn't get saved to the
	 * application's state file, but gets nuked when the app goes away.
	 */

start FileSelectorUI, notDetachable;

class OLFSDynamicList = GenDynamicList {
}

OLFileSelectorGroup = GenInteraction ignoreDirty {
    children = OLFileSelectorControlGroup,
	       OLFileSelectorCenteringGroup;	
    hints = {
	HINT_CENTER_CHILDREN_HORIZONTALLY,
	HINT_EXPAND_HEIGHT_TO_FIT_PARENT,
	HINT_EXPAND_WIDTH_TO_FIT_PARENT
    }
}

OLFileSelectorCenteringGroup = GenInteraction ignoreDirty {
    children = 
#if _DUI
	OLFileSelectorFileCount,
#endif
	OLFileSelectorFileList;
    hints = {	
	HINT_EXPAND_HEIGHT_TO_FIT_PARENT,
#if _DUI
	HINT_EXPAND_WIDTH_TO_FIT_PARENT,
#endif
	HINT_ORIENT_CHILDREN_VERTICALLY,
	HINT_CUSTOM_CHILD_SPACING {
	    SpecSizeSpec <SST_PIXELS, 1>
	}
    }
}

OLFileSelectorControlGroup = GenInteraction ignoreDirty {
#if SINGLE_DRIVE_DOCUMENT_DIR
	children =
		OLFileSelectorDocumentButton;
#else
 #if FSEL_HAS_CHANGE_DRIVE_POPUP && FSEL_HAS_CHANGE_DIRECTORY_POPUP && FSEL_HAS_DOCUMENT_BUTTON
	children =
		OLFileSelectorChangeDirectoryPopup,
		OLFileSelectorDocumentButton,
 		OLFileSelectorChangeDrivePopup;
 #elif FSEL_HAS_CHANGE_DRIVE_POPUP && FSEL_HAS_CHANGE_DIRECTORY_POPUP
	children =
		OLFileSelectorChangeDirectoryPopup,
 		OLFileSelectorChangeDrivePopup;
 #elif FSEL_HAS_CHANGE_DRIVE_POPUP && FSEL_HAS_DOCUMENT_BUTTON
	children =
		OLFileSelectorDocumentButton,
 		OLFileSelectorChangeDrivePopup;
 #elif FSEL_HAS_CHANGE_DIRECTORY_POPUP && FSEL_HAS_DOCUMENT_BUTTON
	children =
		OLFileSelectorChangeDirectoryPopup,
		OLFileSelectorDocumentButton;
 #elif FSEL_HAS_CHANGE_DRIVE_POPUP
	children =
 		OLFileSelectorChangeDrivePopup;
 #elif FSEL_HAS_CHANGE_DIRECTORY_POPUP
	children =
		OLFileSelectorChangeDirectoryPopup;
 #elif FSEL_HAS_DOCUMENT_BUTTON
	children =
		OLFileSelectorDocumentButton;
 #endif
#endif
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY
	}
}


#if FSEL_HAS_DOCUMENT_BUTTON

OLFileSelectorDocumentButton = GenTrigger ignoreDirty {
#if SINGLE_DRIVE_DOCUMENT_DIR
	moniker = 'N', "New Disk";
#else
 	moniker = 'u', "Go to Document";
#endif
	action = MSG_OL_FILE_SELECTOR_DOCUMENT_BUTTON, "TO_OBJ_BLOCK_OUTPUT";
	hints = {
		HINT_DONT_SHOW_SHORTCUT
	}
}
#endif


#if !SINGLE_DRIVE_DOCUMENT_DIR && FSEL_HAS_CHANGE_DIRECTORY_POPUP

OLFileSelectorChangeDirectoryPopup = GenItemGroup {
	moniker = 'P', "Path";
	destination = "TO_OBJ_BLOCK_OUTPUT";
	applyMsg = MSG_OL_FILE_SELECTOR_CHANGE_DIRECTORY_POPUP;
	hints = {
		HINT_ITEM_GROUP_MINIMIZE_SIZE,
		ATTR_GEN_ITEM_GROUP_SET_MODIFIED_ON_REDUNDANT_SELECTION,
		HINT_DONT_SHOW_SHORTCUT
	}
}

#endif


#if FSEL_HAS_CHANGE_DRIVE_POPUP

OLFileSelectorChangeDrivePopup = GenItemGroup {
	moniker = 'v', "Drives";
	destination = "TO_OBJ_BLOCK_OUTPUT";
	applyMsg = MSG_OL_FILE_SELECTOR_CHANGE_DRIVE_POPUP;
	hints = {
		HINT_ITEM_GROUP_MINIMIZE_SIZE,
		ATTR_GEN_ITEM_GROUP_SET_MODIFIED_ON_REDUNDANT_SELECTION,
		HINT_DONT_SHOW_SHORTCUT
	}
}

#endif




#if _FILE_TABLE

OLFileSelectorFileView = OLFSTableView {
	output = OLFileSelectorFileContent;
	viewAttributes = default +noWinFrame, +sendAllKbdChars;
	horizAttributes = noSmallerThanContent, noLargerThanContent;
	vertAttributes  = scrollable, noSmallerThanContent, noLargerThanContent;
}

OLFileSelectorFileContent = OLFSFileContent {
	children =	OLFileSelectorFileLocator,
			OLFileSelectorFileHeading,
			OLFileSelectorFileList;
	visCompGeoAttrs = orientChildrenVertically;
}

OLFileSelectorFileLocator = OLFSFileLocator {
}

OLFileSelectorFileList = OLFSTable {
	rows = 0;
	columns = "FILE_TABLE_NAME_COL + 1";	/* changed for show filesize */
	visibleRows = 10;
	tableFlags = enableAutoScrolling, selectionAlwaysVisible, \
		    exitDragDropUponCompletion, notifySelectionChanged, mainTable;
	columnDefinitions = FileTableDefs;	/* changed for show filesize */
	rowHeight = 16;
	queryMsg = MSG_OL_FILE_SELECTOR_ITEM_QUERY;
	tableRangeInversion = TRIT_ROW;
	selectionDrawStyle = TSDST_FILLED_RECT;
	redrawCount = 0;
}

OLFileSelectorFileHeading = OLFSTableHeading {
	rows = 1;
	columns = "FILE_TABLE_NAME_COL + 1";	/* changed for show filesize */
	visibleRows = 1;
	rowHeight = 16;
 	rowFlags = drawRowSeparator;
	columnDefinitions = TableHeadingDefs;	/* changed for show filesize */
	tableBorderFlags = boxBorders;
	headingCHandle = FileTitleHeading;
}

chunk	FileDateHeading = " Date";
chunk	FileTitleHeading = "     Document";



chunk	FileTableDefs = data {
	TableColumnDefinition \
		< mask TCF_DRAW_RIGHT_SEPARATOR or \
		  mask TCF_START_SELECT or         \
		  mask TCF_DRAG_SELECT or	\
		  mask TCF_END_SELECT or         \
		  mask TCF_DOUBLE_SELECT or	   \
		  mask TCF_RESELECT or		\
		  TRIT_ROW,61>,
		< mask TCF_START_SELECT or         \
		  mask TCF_DRAG_SELECT or	\
		  mask TCF_END_SELECT or         \
		  mask TCF_DOUBLE_SELECT or	   \
		  mask TCF_RESELECT or		\
		  TRIT_ROW,180>
}

localize not;

chunk	TableHeadingDefs = data {
	TableColumnDefinition \
		< mask TCF_DRAW_RIGHT_SEPARATOR, 60>,
		< 0, 179>
}

localize not;

chunk	FileSizeHeading	= " Size";

chunk	FileSizeTableDefs = data {
	TableColumnDefinition \
		< mask TCF_DRAW_RIGHT_SEPARATOR or \
		  mask TCF_START_SELECT or         \
		  mask TCF_DRAG_SELECT or	\
		  mask TCF_END_SELECT or         \
		  mask TCF_DOUBLE_SELECT or	   \
		  mask TCF_RESELECT or		\
		  TRIT_ROW,56>,
		< mask TCF_DRAW_RIGHT_SEPARATOR or \
		  mask TCF_START_SELECT or         \
		  mask TCF_DRAG_SELECT or	\
		  mask TCF_END_SELECT or         \
		  mask TCF_DOUBLE_SELECT or	   \
		  mask TCF_RESELECT or		\
		  TRIT_ROW,147>,
		< mask TCF_START_SELECT or         \
		  mask TCF_DRAG_SELECT or	\
		  mask TCF_END_SELECT or         \
		  mask TCF_DOUBLE_SELECT or	   \
		  mask TCF_RESELECT or 		\
		  TRIT_ROW,38>
}

localize not;

chunk	FileSizeTableHeaderDefs = data {
	TableColumnDefinition \
		< mask TCF_DRAW_RIGHT_SEPARATOR, 55>,
		< mask TCF_DRAW_RIGHT_SEPARATOR, 147>,
		< 0, 37>
}

localize not;

#else /* not _JEDIMOTIF */

#if _DUI
OLFileSelectorFileCount = GenText {
	genStates = default -usable;	/* turn on/off dynamically */
	genAttributes = readOnly;
	text = "";
	textDisplayAttributes = default +singleLineText;
	hints = {
		HINT_EXPAND_WIDTH_TO_FIT_PARENT
	}
}
#endif

OLFileSelectorFileList = OLFSDynamicList {
#if KEYBOARD_ONLY_UI
	moniker = 'D', "Disk Contents";
#endif
	applyMsg = MSG_OL_FILE_SELECTOR_LIST_MESSAGE;
	queryMsg = MSG_OL_FILE_SELECTOR_ITEM_QUERY;
	destination = "TO_OBJ_BLOCK_OUTPUT";
	hints = {
#if KEYBOARD_ONLY_UI
		HINT_PLACE_MONIKER_ABOVE,
		HINT_DRAW_IN_BOX,
#endif
		HINT_ITEM_GROUP_SCROLLABLE,
		ATTR_GEN_SEND_APPLY_MSG_ON_APPLY_EVEN_IF_NOT_MODIFIED,
		ATTR_GEN_ITEM_GROUP_CUSTOM_DOUBLE_PRESS {
			word	MSG_OL_FILE_SELECTOR_DOUBLE_PRESS	
		},
		HINT_DEFAULT_FOCUS,
		ATTR_GEN_ITEM_GROUP_SET_MODIFIED_ON_REDUNDANT_SELECTION
	}
}

#endif		/* if _JEDIMOTIF */




end FileSelectorUI;


#if _DUI
start StringsUI;
chunk FSFileCountDefaultName = "Items";
end StringsUI;
#endif

/*-----------------------------------------------------------------------------
	Keyboard moniker text expansions
-----------------------------------------------------------------------------*/
start MonikerExpandUI, data;

    chunk ctrlString = "Ctrl ";
    chunk altString = "Alt ";
    chunk shiftString = "Shift ";
    chunk escString = "Esc";
	 chunk spaceString = "Space";
	 /* Not sure why this is an H since this is the string for going up one
		folder when no mouse is selected.  And Ctrl U is the key combo that
      does go up one folder.  jfh 8/4/04 */
    chunk ctrlHString = "Ctrl U";
    chunk backspaceString = "Backspace";
    chunk delString = "Del";
    chunk insString = "Ins";
    chunk enterString = "Enter";
    chunk pageUpString = "Page Up";
    chunk pageDownString = "Page Down";
    chunk ActivateMenuKey = "Alt";

end MonikerExpandUI;

/*-----------------------------------------------------------------------------
	GIV_POPOUT GenInteraction stuff
-----------------------------------------------------------------------------*/
start PopoutUI, notDetachable;

PopoutDialogTemplate = GenInteraction ignoreDirty {
	children = PopoutDialogGroup, PopoutPopInTrigger;
	visibility = dialog;
	attributes = default +notUserInitiatable;
	genStates = default -usable;		/* set USABLE dynamically */
	hints = {
		HINT_INTERACTION_NO_DISTURB,
		HINT_INTERACTION_MAKE_RESIZABLE,
		HINT_CENTER_CHILDREN_HORIZONTALLY
	}
}

PopoutDialogGroup = GenInteraction ignoreDirty {
	/* Expand hints nuked to allow windows to only be as large as the
	   children need. -cbh 3/12/93.   Added back in, removing the no-larger
	   hints in PopoutDialogTemplate.  This did nice things for menu bars,
	   not so nice for the icon editor's popout view. -cbh 4/27/93 */
	hints = {
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_EXPAND_HEIGHT_TO_FIT_PARENT
	}
	/* size hints added dynamically */
}

PopoutPopInTrigger = GenTrigger ignoreDirty {
	moniker = list {
		PopoutColorMoniker,
		PopoutBWMoniker,
		PopoutCGAMoniker
	}
	action = MSG_GEN_INTERACTION_POP_IN, "TO_OBJ_BLOCK_OUTPUT";
	hints = {
		HINT_SEEK_TITLE_BAR_RIGHT
	}
}

visMoniker PopoutColorMoniker = {
	size = standard;
	color = color4;
	aspectRatio = normal;
	cachedSize = 21, 11;
	style = tool;
	gstring {
		GSBeginString
		GSSetAreaColorIndex	C_WHITE
		GSFillBitmapAtCP <(EndPopoutLCM-StartPopoutLCM)>
		StartPopoutLCM	label	byte
			Bitmap < 16, 11, 0, <BMF_MONO> >
			db	00011111b, 11111111b
			db	00000000b, 00000000b
			db	00000000b, 00000000b
			db	00000000b, 01000000b
			db	00000000b, 10100000b
			db	00000001b, 00010000b
			db	00000010b, 00001000b
			db	00000000b, 00000000b
			db	00000000b, 00000000b
			db	00011111b, 11111111b
			db	00000000b, 00000000b
		EndPopoutLCM	label	byte
		GSSetAreaColorIndex	C_BLACK
		GSFillBitmapAtCP <(EndPopoutDCM-StartPopoutDCM)>
		StartPopoutDCM	label	byte
			Bitmap < 16, 11, 0, <BMF_MONO> >
			db	00000000b, 00000000b
			db	00011111b, 11111111b
			db	00000000b, 00000000b
			db	00000000b, 00000000b
			db	00000000b, 00000000b
			db	00000000b, 00000000b
			db	00000000b, 00000000b
			db	00000001b, 11110000b
			db	00000000b, 00000000b
			db	00000000b, 00000000b
			db	00011111b, 11111111b
		EndPopoutDCM	label	byte
		GSEndString
	}
}

visMoniker PopoutBWMoniker = {
	size = standard;
	color = gray1;
	aspectRatio = normal;
	cachedSize = 21, 11;
	style = tool;
	gstring {
		GSBeginString
		GSSetAreaColorIndex	C_BLACK
		GSFillBitmapAtCP <(EndPopoutBWM-StartPopoutBWM)>
		StartPopoutBWM	label	byte
			Bitmap < 16, 11, 0, <BMF_MONO> >
			db	00011111b, 11111111b
			db	00011111b, 11111111b
			db	00000000b, 00000000b
			db	00000000b, 01000000b
			db	00000000b, 11100000b
			db	00000001b, 11110000b
			db	00000011b, 11111000b
			db	00000011b, 11111000b
			db	00000000b, 00000000b
			db	00011111b, 11111111b
			db	00011111b, 11111111b
		EndPopoutBWM	label	byte
		GSEndString
	}
}

visMoniker PopoutCGAMoniker = {
	size = standard;
	color = gray1;
	aspectRatio = verySquished;
	cachedSize = 21, 7;
	style = tool;
	gstring {
		GSBeginString
		GSSetAreaColorIndex	C_BLACK
		GSFillBitmapAtCP <(EndPopoutCGAM-StartPopoutCGAM)>
		StartPopoutCGAM	label	byte
			Bitmap < 16, 7, 0, <BMF_MONO> >
			db	00011111b, 11111111b
			db	00000000b, 00000000b
			db	00000000b, 01000000b
			db	00000001b, 11110000b
			db	00000011b, 11111000b
			db	00000000b, 00000000b
			db	00011111b, 11111111b
		EndPopoutCGAM	label	byte
		GSEndString
	}
}

end PopoutUI;
