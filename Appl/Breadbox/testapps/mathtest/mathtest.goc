/*
 * Copyright 2020   Jirka Kunze
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

@include <stdapp.goh>
#include "math_test_function.h"

@class MathTestProcessClass, GenProcessClass;
@endc;


@classdecl MathTestProcessClass, neverSaved;


@start AppResource;

@object GenApplicationClass MathTestApp = {

    GI_visMoniker = list { @MathTestMoniker };
    GI_comp = @MathTestPrimary;
    gcnList( MANUFACTURER_ID_GEOWORKS, GAGCNLT_WINDOWS ) = @MathTestPrimary;
}

@visMoniker MathTestMoniker = "Math Test";

@end AppResource;


@start Interface;

@object GenPrimaryClass MathTestPrimary = {
    
    GI_comp = @MathTestResultGlyph_DataTypeSize,
                @MathTestResultGlyph_PushPop,
                @MathTestResultGlyph_CompESDI,
                @MathTestResultGlyph_FloatToAscii,
                @MathTestResultGlyph_FormatNumber;
}

@object GenGlyphClass MathTestResultGlyph_DataTypeSize = {
    
    GI_visMoniker = "size of datatypes untested";
}

@object GenGlyphClass MathTestResultGlyph_PushPop = {
    
    GI_visMoniker = "function FloatPushNumber and FloatPopNumber untested";
}

@object GenGlyphClass MathTestResultGlyph_CompESDI = {
    
    GI_visMoniker = "function FloatCompESDI untested";
}

@object GenGlyphClass MathTestResultGlyph_FloatToAscii = {
    
    GI_visMoniker = "function FloatToAscii untested";
}

@object GenGlyphClass MathTestResultGlyph_FormatNumber = {
    
    GI_visMoniker = "function FloatFormatNumber untested";
}

@end Interface;


@method MathTestProcessClass, MSG_GEN_PROCESS_OPEN_APPLICATION {
    
    @callsuper();
    
    if( test_datatypesize() )
        @call MathTestResultGlyph_DataTypeSize::MSG_GEN_REPLACE_VIS_MONIKER_TEXT( "size of datatypes ok.", VUM_DELAYED_VIA_UI_QUEUE);
    else
        @call MathTestResultGlyph_DataTypeSize::MSG_GEN_REPLACE_VIS_MONIKER_TEXT( "size of datatypes nok!", VUM_DELAYED_VIA_UI_QUEUE);
        
    if( test_function_push_pop() )
        @call MathTestResultGlyph_PushPop::MSG_GEN_REPLACE_VIS_MONIKER_TEXT( "function FloatPushNumber and FloatPopNumber ok.", VUM_DELAYED_VIA_UI_QUEUE);
    else
        @call MathTestResultGlyph_PushPop::MSG_GEN_REPLACE_VIS_MONIKER_TEXT( "function FloatPushNumber and FloatPopNumber nok!", VUM_DELAYED_VIA_UI_QUEUE);

    if( test_function_compESDI() )
        @call MathTestResultGlyph_CompESDI::MSG_GEN_REPLACE_VIS_MONIKER_TEXT( "function FloatCompESDI ok.", VUM_DELAYED_VIA_UI_QUEUE);
    else
        @call MathTestResultGlyph_CompESDI::MSG_GEN_REPLACE_VIS_MONIKER_TEXT( "function FloatCompESDI nok!", VUM_DELAYED_VIA_UI_QUEUE);

     if( test_funktion_floatFloatToAscii_StdFormat() )
        @call MathTestResultGlyph_FloatToAscii::MSG_GEN_REPLACE_VIS_MONIKER_TEXT( "function FloatToAscii_StdFormat ok.", VUM_DELAYED_VIA_UI_QUEUE);
    else
        @call MathTestResultGlyph_FloatToAscii::MSG_GEN_REPLACE_VIS_MONIKER_TEXT( "function FloatToAscii_StdFormat nok!", VUM_DELAYED_VIA_UI_QUEUE);

    if( test_function_floatFormatNumber() )
        @call MathTestResultGlyph_FormatNumber::MSG_GEN_REPLACE_VIS_MONIKER_TEXT( "function FloatFormatNumber ok.", VUM_DELAYED_VIA_UI_QUEUE);
    else
        @call MathTestResultGlyph_FormatNumber::MSG_GEN_REPLACE_VIS_MONIKER_TEXT( "function FloatFormatNumber nok!", VUM_DELAYED_VIA_UI_QUEUE);
}
