/* Benoetigt... */
@include <globals.goh>

/************************************************************************
Dummy
fuer Swat: allows for setting breakpoints in front of critical code.
*************************************************************************/

/* Msg Box -------------------------------------------------------------*/
void MsgBox(char *str)
{
   UserStandardDialog(NULL, NULL, NULL, NULL,
                        str,
                        (CDT_NOTIFICATION << CDBF_DIALOG_TYPE_OFFSET) |
                        (GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET)
                     );
   /*UNLOCK(format);*/
}

void MsgBoxNo(dword val)
{
   char valStr[5];
	sprintf(valStr, _TEXT("%d"), val);

   UserStandardDialog(NULL, NULL, NULL, NULL,
                        valStr,
                        (CDT_NOTIFICATION << CDBF_DIALOG_TYPE_OFFSET) |
                        (GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET)
                     );
}


/* Ja/Nein Box -----------------------------------------------------------*/
Boolean DecideBox(optr format)
{
   if (UserStandardDialog(NULL, NULL, NULL, NULL,
                                     LOCK(format),
                                     (CDT_QUESTION << CDBF_DIALOG_TYPE_OFFSET) |
                                     (GIT_AFFIRMATION << CDBF_INTERACTION_TYPE_OFFSET)
                                    ) == IC_YES)
       {
            UNLOCK(format);
            return TRUE;         /* Ja Antwort */
       }
       else
       {
            UNLOCK(format);
            return FALSE;        /* Nein Antwort */
       }
}

/***********************************************************************
 ListFiles
 whatFiles: FESF_NON_GEOS
                  FESF_GEOS_EXECS
                  FESF_GEOS_NON_EXECS
                  FESF_DIRS
                  FILE_ENUM_ALL_FILE_TYPES (but no directories)
 ***********************************************************************/
word ListFiles(MemHandle* FilesToReturn, FileEnumSearchFlags whatFiles)  /*numOfFiles returned*/
{
   FileEnumParams       fileEnumParams;
   word                 filesNotHandled = NULL;
   word                 numOfFiles = NULL;

   fileEnumParams.FEP_searchFlags = whatFiles;

   fileEnumParams.FEP_returnAttrs = (void*) FESRT_NAME;  /*Return the file's Geos filename.*/

   fileEnumParams.FEP_returnSize = FILE_LONGNAME_BUFFER_SIZE;
   fileEnumParams.FEP_bufSize = FE_BUFSIZE_UNLIMITED;    /* FE_BUFSIZE_UNLIMITED allows the return buffer size to be as large as necessary.*/

   fileEnumParams.FEP_matchAttrs = 0;  /* Set matchAttrs to zero so it will match anything.*/
   fileEnumParams.FEP_skipCount = 0;   /* Don't skip any files*/
   fileEnumParams.FEP_callback = 0;   /* Don't need no callback. */

   numOfFiles = FileEnum( &fileEnumParams,
                          FilesToReturn,
                          &filesNotHandled);

   if (numOfFiles && (*FilesToReturn))
   {
      return(numOfFiles);
   }
   else
   {
      return(0);
   }
}

word CountFiles(FileEnumSearchFlags whatFiles)  /* numOfFiles returned */
{
   FileEnumParams       fileEnumParams;
   word                 numOfFiles = NULL;

   fileEnumParams.FEP_searchFlags = whatFiles;
   fileEnumParams.FEP_returnAttrs = (void*) FESRT_COUNT_ONLY;  /*Return the file's Geos filename.*/
   fileEnumParams.FEP_returnSize = 0;
   fileEnumParams.FEP_bufSize = FE_BUFSIZE_UNLIMITED;    /* FE_BUFSIZE_UNLIMITED allows the return buffer size to be as large as necessary.*/
   fileEnumParams.FEP_matchAttrs = 0;  /* Set matchAttrs to zero so it will match anything.*/
   fileEnumParams.FEP_skipCount = 0;   /* Don't skip any files*/
   fileEnumParams.FEP_callback = 0;   /* Don't need no callback. */

	(void) FileEnum(&fileEnumParams, NullHandle, &numOfFiles);
   return numOfFiles;
}
