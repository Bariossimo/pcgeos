/*
***************************************************************************
*              Include files
***************************************************************************
*/
@include <stdapp.goh>
@include <Objects/eMenuC.goh>
@include <Objects/gFieldC.goh>
@include <utils.goh>
@include <globals.goh>
#include <Ansi/stdio.h>
#include <Ansi/string.h>
#include <token.h>
#include <object.h>

word        launcherNr      = NULL;
word        numFiles        = 0;
MemHandle   filesHan        = 0;
char*       filesPtr        = 0;
optr        triggers[25];

#define MAX_TRIGGERS 24   /* 0-based, it's 25 actually */

/*
***************************************************************************
*              Class & Message Definitions
***************************************************************************
*/

@class  TrayAppsProcessClass, GenProcessClass;
    @message void MSG_ADD_LAUNCHER();
    @message void MSG_EMC_LAUNCHER_TRIGGER_CREATED(CreateExpressMenuControlItemResponseParams *response = ss:bp);
    @message (GEN_TRIGGER_ACTION) MSG_SOFT_LAUNCHER_PRESSED;
@endc   /* end of class definition */

@class GenGeodeTokenTriggerClass, GenTriggerClass;
    @vardata GeodeToken ATTR_GEODE_TOKEN_TO_PASS;
@endc;

@classdecl   TrayAppsProcessClass, neverSaved;
@classdecl   GenGeodeTokenTriggerClass, neverSaved;
/*
***************************************************************************
*              UI Objects
***************************************************************************
*/

@start  AppResource;

    @object GenApplicationClass TrayAppsApp =
    {
        GAI_states = (((@default) | (AS_NOT_USER_INTERACTABLE) | (AS_AVOID_TRANSPARENT_DETACH)) & ((~AS_FOCUSABLE) & (~AS_MODELABLE)));
        GI_attrs = ((@default) & (~GA_TARGETABLE));

        GI_visMoniker = list {@TrayAppsAppTextMoniker};
    }

    @visMoniker TrayAppsAppTextMoniker = "TrayApps";

@end    AppResource;


/***********************************************************************
CODE
/*********************************************************************
* Beim Starten der Applikation Trigger anlegen.
*********************************************************************/
@method TrayAppsProcessClass, MSG_GEN_PROCESS_OPEN_APPLICATION
{
    @callsuper();

	(void)	GCNListAdd(
        oself,			                // optr to add to list
        MANUFACTURER_ID_GEOWORKS,	    // manufacturer ID of list
        GCNSLT_FILE_SYSTEM
    );

    if (FileSetCurrentPath(SP_APPLICATION, "TrayApps"))
    {
        numFiles = ListFiles(&filesHan, FESF_GEOS_EXECS);

        if (numFiles)
        {
            numFiles--;
            if (numFiles > MAX_TRIGGERS) numFiles = MAX_TRIGGERS;
            @call process::MSG_ADD_LAUNCHER();
        }
    }
}

/*
    FileChangeNotificationType notifyType
    MemHandle data)
*/
/*
@method TrayAppsProcessClass, MSG_NOTIFY_FILE_CHANGE
{
    FileChangeBatchNotificationData     *batch;
    FileChangeBatchNotificationItem     *item;
    word                                i = 0;

    if (notifyType == FCNT_BATCH)
    {
        batch = MemLock(data);
        item = batch->FCBND_notifications;

        while (item < batch->FCBND_end)
        {
            if (
                (item->FCBNI_type == FCNT_CREATE) ||
                (item->FCBNI_type == FCNT_RENAME) ||
                (item->FCBNI_type == FCNT_DELETE)
            )
            {

                // FileGetCurrentPathIDs


                //if (strstr(item->FCBNI_name, "TrayApps"))
                //if (item->FCBNI_type == FCNT_CREATE)
                //if (LocalCmpStrings(item->FCBNI_name, "EC Preferences", 0));
                {
                    //item->FCBNI_name[14] = '\0';
                    MsgBox(CDT_NOTIFICATION, (char*) item->FCBNI_id);
                    break;
                }
            }

            item++;

            //break;
        }

        //MemFree(data);
    }
}
*/

@method TrayAppsProcessClass, MSG_NOTIFY_FILE_CHANGE
{
    FileChangeBatchNotificationData *notificationData;
    FileChangeBatchNotificationItem *notificationItem = 0;

    if (notifyType == FCNT_BATCH)
    {
        notificationData = (FileChangeBatchNotificationData*) MemLock(data);
        notificationItem = &notificationData->FCBND_notifications[0];

        while(notificationItem != notificationData->FCBND_end)
        {
            word itemSize;

            /* operate on notificationItem strukture data here */
            //notificationItem->FCBNI_disk ....

            if (notificationItem->FCBNI_type == FCNT_CREATE)
            //if (LocalCmpStrings(item->FCBNI_name, "EC Preferences", 0));
            {
                //item->FCBNI_name[14] = '\0';
                MsgBox(CDT_NOTIFICATION, (char*) notificationItem->FCBNI_name);
                break;
            }


            /* next item */
            if(notificationItem->FCBNI_type == something) {
                /* skip large item for next */
                itemSize = sizeof(FileChangeBatchNoficicationItem);
            } else {
                /* skip small item for next */
                itemSize = offsetof(FileChangeBatchNoficicationItem, FCBNI_name);
            }
            notificationItem = (FileChangeBatchNoficicationItem*) ((byte*) notificationItem) + itemSize);
        }
    }
}


/*********************************************************************
* Beim Starten der Applikation Trigger anlegen.
*********************************************************************/
@method TrayAppsProcessClass, MSG_ADD_LAUNCHER
{
    CreateExpressMenuControlItemParams  cemcip;
    EventHandle                         event;

    if (launcherNr <= numFiles)
    {
        /*cemcip.CEMCIP_feature = CEMCIF_UTILITIES_PANEL;*/
        cemcip.CEMCIP_feature = CEMCIF_SYSTEM_TRAY;
        cemcip.CEMCIP_class = &GenGeodeTokenTriggerClass;
        cemcip.CEMCIP_itemPriority = CEMCIP_STANDARD_PRIORITY;
        cemcip.CEMCIP_responseMessage = MSG_EMC_LAUNCHER_TRIGGER_CREATED;
        cemcip.CEMCIP_responseDestination = oself;
        cemcip.CEMCIP_field = NullOptr;

        event = @record ExpressMenuControlClass::MSG_EXPRESS_MENU_CONTROL_CREATE_ITEM(cemcip);
        GCNListSend(MANUFACTURER_ID_GEOWORKS, GCNSLT_EXPRESS_MENU_OBJECTS, event, 0, 0);
    }
    else
    {
        // no more launcher buttons
        if (filesHan) MemFree(filesHan);
    }
}

/***********************************************************************
*    Initializes the newly created Express menu trigger
***********************************************************************/
@method TrayAppsProcessClass, MSG_EMC_LAUNCHER_TRIGGER_CREATED
{
    optr           obj = NULL;
    Boolean        isGMoniker = FALSE;
    MemHandle      newMoniker = NULL;
    word           monikerSize = 0;
    GeodeToken     tok;
    //optr*          fh  = NULL;
    //ChunkHandle    helpChunk = NULL;
    //char*          helpChunkPtr = NULL;

    filesPtr = MemLock(filesHan);
    filesPtr = filesPtr + (launcherNr * FILE_LONGNAME_BUFFER_SIZE);
    FileGetPathExtAttributes(filesPtr, FEA_TOKEN, (&tok), sizeof(GeodeToken));
    // MemLock(OptrToHandle(@MinimHelp));
    // helpChunk = LMemAlloc(OptrToHandle(@MinimHelp), FILE_LONGNAME_BUFFER_SIZE);
    // helpChunkPtr = LMemDerefHandles(OptrToHandle(@MinimHelp), helpChunk);
    // strcpy(helpChunkPtr, filesPtr);
    // MemUnlock(OptrToHandle(@MinimHelp));
    MemUnlock(filesHan);

    obj = response->CEMCIRP_newItem;

    isGMoniker = TokenLoadMonikerBlock(
                        TOKEN_CHARS(tok.GT_chars[0],tok.GT_chars[1],tok.GT_chars[2],tok.GT_chars[3]),
                        tok.GT_manufID,
                        (DT_DISP_SIZE | DT_DISP_ASPECT_RATIO | DT_DISP_CLASS),
                        ((VMSF_GSTRING) | (VMS_TOOL << VMSF_STYLE_OFFSET)),
                        &monikerSize,
                        &newMoniker);

    if (isGMoniker)
    {
        @call obj::MSG_GEN_REPLACE_VIS_MONIKER(
            VUM_NOW,
            0, 0, monikerSize,
            VMDT_VIS_MONIKER,
            VMST_HPTR,
            (dword)(ConstructOptr(newMoniker, 0))
        );
    }

    @call obj::MSG_GEN_TRIGGER_SET_ACTION_MSG(MSG_SOFT_LAUNCHER_PRESSED);
    @call obj::MSG_GEN_TRIGGER_SET_DESTINATION(oself);
    //@call obj::MSG_META_ADD_VAR_DATA(HINT_NO_BORDERS_ON_MONIKERS, 0, (void*) 0);
    @call obj::MSG_META_ADD_VAR_DATA((ATTR_GEODE_TOKEN_TO_PASS & (~VDF_SAVE_TO_STATE)), sizeof(GeodeToken), &tok);

    // MemLock(HandleOf(obj));
    // fh = (optr*) ObjVarAddData(obj, (ATTR_GEN_FOCUS_HELP & (~VDF_SAVE_TO_STATE)), sizeof(optr));
    // (*fh) = ConstructOptr(OptrToHandle(@MinimHelp), helpChunk);
    // ObjSetFlags(obj, OCF_VARDATA_RELOC, 0);
    // MemUnlock(HandleOf(obj));

    @call obj::MSG_GEN_SET_USABLE(VUM_NOW);
    triggers[launcherNr] = obj;

    launcherNr++;
    //MemFree(newMoniker);

    @call process::MSG_ADD_LAUNCHER();
}

/***********************************************************************
*
***********************************************************************/
@method TrayAppsProcessClass, MSG_SOFT_LAUNCHER_PRESSED
{
    GeodeToken gt;

    @call trigger::MSG_META_GET_VAR_DATA(ATTR_GEODE_TOKEN_TO_PASS, sizeof(GeodeToken), &gt);
    LaunchApp(gt);
}

/***********************************************************************
*
***********************************************************************/
@method TrayAppsProcessClass, MSG_GEN_PROCESS_CLOSE_APPLICATION
{
    EventHandle    event;

    while(launcherNr--)
    {
        event = @record ExpressMenuControlClass::MSG_EXPRESS_MENU_CONTROL_DESTROY_CREATED_ITEM(triggers[launcherNr], VUM_NOW);
        GCNListSend(MANUFACTURER_ID_GEOWORKS, GCNSLT_EXPRESS_MENU_OBJECTS, event, 0, 0);
    }

    return @callsuper();
}

/*------------------------------------------------------------------
This is called by MSG_META_DETACH and allows for changing the
name of the state file which should be created for the application.
We don't want no state file, so we just return 0.
------------------------------------------------------------------*/
@method TrayAppsProcessClass, MSG_GEN_PROCESS_CREATE_NEW_STATE_FILE
{
    return 0;
}
